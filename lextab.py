# lextab.py. This file automatically created by PLY (version 3.11). Don't edit!
_tabversion   = '3.10'
_lextokens    = set(('AND', 'AS', 'ASPASDUPLAS', 'ASPASSIMPLES', 'ASSERT', 'ASSIGN', 'BINARY', 'BIT_AND', 'BIT_AND_ASSIGN', 'BIT_LSHIFT_ASSIGN', 'BIT_NOT', 'BIT_OR', 'BIT_OR_ASSIGN', 'BIT_RSHIFT_ASSIGN', 'BIT_XOR', 'BIT_XOR_ASSIGN', 'BOOL', 'BREAK', 'COLON', 'COMMA', 'CONST', 'CONTINUE', 'DECLARE_ASSIGN', 'DECREMENT', 'DEFER', 'DIVIDE', 'DIVIDE_ASSIGN', 'DOLLAR', 'DOT', 'DOTDOT', 'ELSE', 'ENUM', 'EQ', 'EXCLAMATION', 'F32', 'F64', 'FALSE', 'FN', 'FOR', 'GE', 'GLOBAL', 'GT', 'ID', 'IF', 'IMPORT', 'IN', 'INCREMENT', 'INT', 'IS', 'ISREFTYPE', 'LBRACE', 'LBRACKET', 'LE', 'LPAREN', 'LSHIFT', 'LT', 'MAIN', 'MATCH', 'MINUS', 'MINUS_ASSIGN', 'MOD', 'MOD_ASSIGN', 'MUT', 'NEQ', 'NONE', 'NOT', 'NOTACAOCIENTIFICA', 'NUMBER', 'NUMBERFLOAT', 'OCTALHEX', 'OR', 'PLUS', 'PLUS_ASSIGN', 'QUESTION', 'RBRACE', 'RBRACKET', 'RETURN', 'RPAREN', 'RSHIFT', 'RUNE', 'SEMICOLON', 'SIZEOF', 'STRING', 'TIMES', 'TIMES_ASSIGN', 'TRUE', 'TYPE', 'TYPEOF', 'UNION', 'UNSAFE'))
_lexreflags   = 64
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_STRING>\\\'[^\\\']*\\\'|\\"[^\\"]*\\")|(?P<t_ID>[a-z][a-z0-9_]*)|(?P<t_BINARY>0[bB][01]+)|(?P<t_OCTAL>0[oO][0-7]+)|(?P<t_HEX>0[xX][0-9a-fA-F]+)|(?P<t_NOTACAOCIENTIFICA>\\d+(\\.\\d+)?([eE][+-]?\\d+))|(?P<t_NUMBERFLOAT>\\d+\\.\\d+)|(?P<t_NUMBER>\\d+)|(?P<t_XOMENTARIOSIMPLES>//.*)|(?P<t_BLOCODECOMENTARIO>/\\*(.|\\n)*?\\*/)|(?P<t_newline>\\n+)|(?P<t_OR>\\|\\|)|(?P<t_INCREMENT>\\+\\+)|(?P<t_DOTDOT>\\.\\.)|(?P<t_PLUS_ASSIGN>\\+=)|(?P<t_TIMES_ASSIGN>\\*=)|(?P<t_BIT_OR_ASSIGN>\\|=)|(?P<t_BIT_XOR_ASSIGN>\\^=)|(?P<t_BIT_LSHIFT_ASSIGN><<=)|(?P<t_BIT_RSHIFT_ASSIGN>>>=)|(?P<t_PLUS>\\+)|(?P<t_TIMES>\\*)|(?P<t_MINUS_ASSIGN>-=)|(?P<t_DIVIDE_ASSIGN>/=)|(?P<t_MOD_ASSIGN>%=)|(?P<t_BIT_AND_ASSIGN>&=)|(?P<t_EQ>==)|(?P<t_NEQ>!=)|(?P<t_LE><=)|(?P<t_GE>>=)|(?P<t_AND>&&)|(?P<t_BIT_OR>\\|)|(?P<t_BIT_XOR>\\^)|(?P<t_LSHIFT><<)|(?P<t_RSHIFT>>>)|(?P<t_DECREMENT>--)|(?P<t_DECLARE_ASSIGN>:=)|(?P<t_QUESTION>\\?)|(?P<t_LPAREN>\\()|(?P<t_RPAREN>\\))|(?P<t_LBRACE>\\{)|(?P<t_RBRACE>\\})|(?P<t_LBRACKET>\\[)|(?P<t_RBRACKET>\\])|(?P<t_DOT>\\.)|(?P<t_DOLLAR>\\$)|(?P<t_ASPASSIMPLES>\\\')|(?P<t_ASPASDUPLAS>\\")|(?P<t_MINUS>-)|(?P<t_DIVIDE>/)|(?P<t_MOD>%)|(?P<t_ASSIGN>=)|(?P<t_LT><)|(?P<t_GT>>)|(?P<t_NOT>!)|(?P<t_BIT_AND>&)|(?P<t_BIT_NOT>~)|(?P<t_EXCLAMATION>!)|(?P<t_COMMA>,)|(?P<t_SEMICOLON>;)|(?P<t_COLON>:)', [None, ('t_STRING', 'STRING'), ('t_ID', 'ID'), ('t_BINARY', 'BINARY'), ('t_OCTAL', 'OCTAL'), ('t_HEX', 'HEX'), ('t_NOTACAOCIENTIFICA', 'NOTACAOCIENTIFICA'), None, None, ('t_NUMBERFLOAT', 'NUMBERFLOAT'), ('t_NUMBER', 'NUMBER'), ('t_XOMENTARIOSIMPLES', 'XOMENTARIOSIMPLES'), ('t_BLOCODECOMENTARIO', 'BLOCODECOMENTARIO'), None, ('t_newline', 'newline'), (None, 'OR'), (None, 'INCREMENT'), (None, 'DOTDOT'), (None, 'PLUS_ASSIGN'), (None, 'TIMES_ASSIGN'), (None, 'BIT_OR_ASSIGN'), (None, 'BIT_XOR_ASSIGN'), (None, 'BIT_LSHIFT_ASSIGN'), (None, 'BIT_RSHIFT_ASSIGN'), (None, 'PLUS'), (None, 'TIMES'), (None, 'MINUS_ASSIGN'), (None, 'DIVIDE_ASSIGN'), (None, 'MOD_ASSIGN'), (None, 'BIT_AND_ASSIGN'), (None, 'EQ'), (None, 'NEQ'), (None, 'LE'), (None, 'GE'), (None, 'AND'), (None, 'BIT_OR'), (None, 'BIT_XOR'), (None, 'LSHIFT'), (None, 'RSHIFT'), (None, 'DECREMENT'), (None, 'DECLARE_ASSIGN'), (None, 'QUESTION'), (None, 'LPAREN'), (None, 'RPAREN'), (None, 'LBRACE'), (None, 'RBRACE'), (None, 'LBRACKET'), (None, 'RBRACKET'), (None, 'DOT'), (None, 'DOLLAR'), (None, 'ASPASSIMPLES'), (None, 'ASPASDUPLAS'), (None, 'MINUS'), (None, 'DIVIDE'), (None, 'MOD'), (None, 'ASSIGN'), (None, 'LT'), (None, 'GT'), (None, 'NOT'), (None, 'BIT_AND'), (None, 'BIT_NOT'), (None, 'EXCLAMATION'), (None, 'COMMA'), (None, 'SEMICOLON'), (None, 'COLON')])]}
_lexstateignore = {'INITIAL': ' \t'}
_lexstateerrorf = {'INITIAL': 't_error'}
_lexstateeoff = {}
