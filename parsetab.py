
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BINARY BIT_AND_ASSIGN BIT_LSHIFT_ASSIGN BIT_OR_ASSIGN BIT_RSHIFT_ASSIGN BIT_XOR_ASSIGN BOOL BREAK COMMA CONST DECLARE_ASSIGN DECREMENT DIVIDE DIVIDE_ASSIGN DOTDOT ELSE EQ F32 F64 FALSE FN FOR GE GT HEX ID IF IMPORT IN INCREMENT INT INTERPOLATIONSTRING LBRACE LBRACKET LE LPAREN LT MAIN MINUS MINUS_ASSIGN MOD MOD_ASSIGN MUT NEQ NOT NOTACAOCIENTIFICA NUMBER NUMBERFLOAT OCTAL OR PLUS PLUS_ASSIGN RBRACE RBRACKET RETURN RPAREN RUNE RUNEVALOR SEMICOLON SIZEOF STRING TIMES TIMES_ASSIGN TRUE WORDprogram : program_import program_itemsprogram : program_itemsprogram_import : IMPORT ID program_importprogram_import : IMPORT IDprogram_items : program_item program_itemsprogram_items : program_itemprogram_item : const_declarationprogram_item : function_definitionconst_declaration : CONST ID DECLARE_ASSIGN expressionfunction_definition : signature block_statementfunction_definition : signature ID block_statement  signature : FN ID LPAREN sigparams RPAREN   signature : FN ID LPAREN RPAREN sigparams : ID IDsigparams : ID ID COMMA sigparamsparams : expression COMMA paramsparams : expressionblock_statement :  LBRACE statements RBRACEblock_statement : LBRACE RBRACEstatements : statement statementsstatements : statementstatement :  var_statement statement :  var_assignment statement : list_statement statement :  list_assignment statement :  func_call statement :  if_statement statement :  for_statement statement :  increment_rule statement : assignment statement : BREAKstatement :  RETURN expressionvar_statement : ID DECLARE_ASSIGN expressionvar_statement : MUT ID DECLARE_ASSIGN expressionvar_assignment :  ID ASSIGN expressionlist_statement : ID DECLARE_ASSIGN LBRACKET params RBRACKETlist_statement : MUT ID DECLARE_ASSIGN LBRACKET params RBRACKETlist_statement : MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET IDlist_assignment : ID LBRACKET NUMBER RBRACKET ASSIGN expressionlist_call : ID LBRACKET DOTDOT RBRACKETlist_call : ID LBRACKET NUMBER DOTDOT NUMBER RBRACKETfunc_call : ID LPAREN params RPARENfunc_call : ID LPAREN RPARENif_statement : IF expression_relacional block_statement if_statement : IF expression_relacional block_statement  elseopelseop : ELSE if_statementelseop : ELSE block_statement for_statement : FOR ID IN expression block_statement for_statement : FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement for_statement : FOR expression_relacional block_statement expression : expression PLUS termexpression : expression MINUS termexpression :  increment_ruleexpression : func_callexpression : list_callterm : term TIMES factorterm : term DIVIDE factorterm : term MOD factorterm : factorfactor : IDfactor : NUMBERfactor : NUMBERFLOATfactor : WORDfactor : TRUEfactor : FALSEfactor : RUNEVALORfactor : LPAREN expression RPARENfactor : ID LBRACKET NUMBER RBRACKETfactor : NOTACAOCIENTIFICAfactor : BINARYfactor : OCTALfactor : HEXfactor : size_of_expressionsize_of_expression : SIZEOF LPAREN expression RPARENsize_of_expression : SIZEOF LPAREN ID RPARENincrement_rule : ID INCREMENTincrement_rule : ID DECREMENTexpression_relacional : expression EQ expressionexpression_relacional : expression NEQ expressionexpression_relacional : expression LT expressionexpression_relacional : expression LE expressionexpression_relacional : expression GT expressionexpression_relacional : expression GE expressionexpression_relacional : expression AND expressionexpression_relacional : expression OR expressionexpression_relacional : NOT expressionassignment : ID PLUS_ASSIGN expressionassignment : ID MINUS_ASSIGN expressionassignment : ID TIMES_ASSIGN expressionassignment : ID DIVIDE_ASSIGN expressionassignment : ID MOD_ASSIGN expressionassignment : ID BIT_AND_ASSIGN expressionassignment : ID BIT_OR_ASSIGN expressionassignment : ID BIT_XOR_ASSIGN expressionassignment : ID BIT_LSHIFT_ASSIGN expressionassignment : ID BIT_RSHIFT_ASSIGN expression'
    
_lr_action_items = {'IMPORT':([0,12,],[4,4,]),'CONST':([0,2,5,6,7,12,15,19,21,23,42,43,44,45,46,53,54,82,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,166,167,168,170,177,178,179,180,],[8,8,8,-7,-8,-4,-10,-3,-11,-19,-9,-53,-54,-55,-18,-76,-77,-43,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'FN':([0,2,5,6,7,12,15,19,21,23,42,43,44,45,46,53,54,82,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,166,167,168,170,177,178,179,180,],[10,10,10,-7,-8,-4,-10,-3,-11,-19,-9,-53,-54,-55,-18,-76,-77,-43,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'$end':([1,3,5,6,7,11,13,15,21,23,42,43,44,45,46,53,54,82,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,166,167,168,170,177,178,179,180,],[0,-2,-6,-7,-8,-1,-5,-10,-11,-19,-9,-53,-54,-55,-18,-76,-77,-43,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'ID':([4,8,9,10,17,20,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,43,44,45,46,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,68,71,73,75,76,77,78,79,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,109,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,131,132,133,134,135,147,148,150,151,152,155,156,157,160,161,162,163,166,167,168,170,173,174,177,178,179,180,181,182,],[12,14,16,18,36,41,-19,36,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,41,65,41,69,71,-53,-54,-55,-18,-32,41,41,41,-76,-77,41,41,41,41,41,41,41,41,41,41,41,108,-13,114,114,-33,41,-35,-43,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,41,-44,41,41,41,41,41,41,41,41,41,41,-50,-12,-51,-59,-60,-61,-62,-63,-64,-65,-66,41,-69,-70,-71,-72,-73,-52,-42,41,-34,41,-45,71,-40,114,114,114,172,-36,41,-46,-47,-48,175,-56,-57,-58,-67,-39,181,-41,-68,-74,-75,-38,-49,]),'LBRACE':([9,16,43,44,45,53,54,66,70,73,82,104,109,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,136,137,138,139,140,141,142,143,144,145,148,166,167,168,170,176,177,178,179,180,],[17,17,-53,-54,-55,-76,-77,17,17,-13,-43,-86,-12,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,17,-78,-79,-80,-81,-82,-83,-84,-85,17,-40,-56,-57,-58,-67,17,-41,-68,-74,-75,]),'DECLARE_ASSIGN':([14,36,65,],[20,49,94,]),'RBRACE':([17,22,23,24,25,26,27,28,29,30,31,32,33,34,43,44,45,46,47,48,53,54,77,79,82,84,85,86,87,88,89,90,91,92,93,95,107,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,133,135,148,156,160,161,162,166,167,168,170,173,174,177,178,179,180,181,182,],[23,46,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-53,-54,-55,-18,-20,-32,-76,-77,-33,-35,-43,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-44,-50,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-34,-45,-40,-36,-46,-47,-48,-56,-57,-58,-67,-39,-37,-41,-68,-74,-75,-38,-49,]),'BREAK':([17,23,24,25,26,27,28,29,30,31,32,33,34,43,44,45,46,48,53,54,77,79,82,84,85,86,87,88,89,90,91,92,93,95,107,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,133,135,148,156,160,161,162,166,167,168,170,173,174,177,178,179,180,181,182,],[34,-19,34,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-53,-54,-55,-18,-32,-76,-77,-33,-35,-43,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-44,-50,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-34,-45,-40,-36,-46,-47,-48,-56,-57,-58,-67,-39,-37,-41,-68,-74,-75,-38,-49,]),'RETURN':([17,23,24,25,26,27,28,29,30,31,32,33,34,43,44,45,46,48,53,54,77,79,82,84,85,86,87,88,89,90,91,92,93,95,107,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,133,135,148,156,160,161,162,166,167,168,170,173,174,177,178,179,180,181,182,],[35,-19,35,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-53,-54,-55,-18,-32,-76,-77,-33,-35,-43,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-44,-50,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-34,-45,-40,-36,-46,-47,-48,-56,-57,-58,-67,-39,-37,-41,-68,-74,-75,-38,-49,]),'MUT':([17,23,24,25,26,27,28,29,30,31,32,33,34,43,44,45,46,48,53,54,77,79,82,84,85,86,87,88,89,90,91,92,93,95,107,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,133,135,148,156,160,161,162,166,167,168,170,173,174,177,178,179,180,181,182,],[37,-19,37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-53,-54,-55,-18,-32,-76,-77,-33,-35,-43,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-44,-50,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-34,-45,-40,-36,-46,-47,-48,-56,-57,-58,-67,-39,-37,-41,-68,-74,-75,-38,-49,]),'IF':([17,23,24,25,26,27,28,29,30,31,32,33,34,43,44,45,46,48,53,54,77,79,82,84,85,86,87,88,89,90,91,92,93,95,107,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,133,135,136,148,156,160,161,162,166,167,168,170,173,174,177,178,179,180,181,182,],[38,-19,38,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-53,-54,-55,-18,-32,-76,-77,-33,-35,-43,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-44,-50,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-34,-45,38,-40,-36,-46,-47,-48,-56,-57,-58,-67,-39,-37,-41,-68,-74,-75,-38,-49,]),'FOR':([17,23,24,25,26,27,28,29,30,31,32,33,34,43,44,45,46,48,53,54,77,79,82,84,85,86,87,88,89,90,91,92,93,95,107,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,133,135,148,156,160,161,162,166,167,168,170,173,174,177,178,179,180,181,182,],[39,-19,39,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-53,-54,-55,-18,-32,-76,-77,-33,-35,-43,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-44,-50,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-34,-45,-40,-36,-46,-47,-48,-56,-57,-58,-67,-39,-37,-41,-68,-74,-75,-38,-49,]),'LPAREN':([18,36,41,69,75,76,127,150,151,152,172,],[40,52,52,52,121,121,155,121,121,121,52,]),'ELSE':([23,46,95,],[-19,-18,136,]),'ASSIGN':([36,130,],[50,157,]),'LBRACKET':([36,41,49,69,94,114,172,],[51,74,78,74,134,153,74,]),'INCREMENT':([36,41,69,172,175,],[53,53,53,53,53,]),'DECREMENT':([36,41,69,172,175,],[54,54,54,54,54,]),'PLUS_ASSIGN':([36,],[55,]),'MINUS_ASSIGN':([36,],[56,]),'TIMES_ASSIGN':([36,],[57,]),'DIVIDE_ASSIGN':([36,],[58,]),'MOD_ASSIGN':([36,],[59,]),'BIT_AND_ASSIGN':([36,],[60,]),'BIT_OR_ASSIGN':([36,],[61,]),'BIT_XOR_ASSIGN':([36,],[62,]),'BIT_LSHIFT_ASSIGN':([36,],[63,]),'BIT_RSHIFT_ASSIGN':([36,],[64,]),'NOT':([38,39,106,],[68,68,68,]),'RPAREN':([40,43,44,45,52,53,54,72,81,82,83,108,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,154,158,164,166,167,168,170,171,172,177,178,179,180,],[73,-53,-54,-55,82,-76,-77,109,131,-43,-17,-14,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,170,-16,-15,-56,-57,-58,-67,179,180,-41,-68,-74,-75,]),'PLUS':([42,43,44,45,48,53,54,67,77,79,82,83,84,85,86,87,88,89,90,91,92,93,104,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,133,137,138,139,140,141,142,143,144,145,148,154,166,167,168,170,171,173,177,178,179,180,],[75,-53,-54,-55,75,-76,-77,75,75,75,-43,75,75,75,75,75,75,75,75,75,75,75,75,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,75,75,75,75,75,75,75,75,75,75,-40,75,-56,-57,-58,-67,75,75,-41,-68,-74,-75,]),'MINUS':([42,43,44,45,48,53,54,67,77,79,82,83,84,85,86,87,88,89,90,91,92,93,104,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,133,137,138,139,140,141,142,143,144,145,148,154,166,167,168,170,171,173,177,178,179,180,],[76,-53,-54,-55,76,-76,-77,76,76,76,-43,76,76,76,76,76,76,76,76,76,76,76,76,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,76,76,76,76,76,76,76,76,76,76,-40,76,-56,-57,-58,-67,76,76,-41,-68,-74,-75,]),'EQ':([43,44,45,53,54,67,82,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,166,167,168,170,177,178,179,180,],[-53,-54,-55,-76,-77,96,-43,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'NEQ':([43,44,45,53,54,67,82,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,166,167,168,170,177,178,179,180,],[-53,-54,-55,-76,-77,97,-43,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'LT':([43,44,45,53,54,67,82,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,166,167,168,170,177,178,179,180,],[-53,-54,-55,-76,-77,98,-43,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'LE':([43,44,45,53,54,67,82,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,166,167,168,170,177,178,179,180,],[-53,-54,-55,-76,-77,99,-43,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'GT':([43,44,45,53,54,67,82,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,166,167,168,170,177,178,179,180,],[-53,-54,-55,-76,-77,100,-43,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'GE':([43,44,45,53,54,67,82,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,166,167,168,170,177,178,179,180,],[-53,-54,-55,-76,-77,101,-43,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'AND':([43,44,45,53,54,67,82,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,166,167,168,170,177,178,179,180,],[-53,-54,-55,-76,-77,102,-43,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'OR':([43,44,45,53,54,67,82,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,166,167,168,170,177,178,179,180,],[-53,-54,-55,-76,-77,103,-43,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'COMMA':([43,44,45,53,54,82,83,108,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,148,166,167,168,170,177,178,179,180,],[-53,-54,-55,-76,-77,-43,132,147,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'SEMICOLON':([43,44,45,53,54,69,82,104,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,131,137,138,139,140,141,142,143,144,146,148,166,167,168,170,177,178,179,180,],[-53,-54,-55,-76,-77,106,-43,-86,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,-42,-78,-79,-80,-81,-82,-83,-84,-85,163,-40,-56,-57,-58,-67,-41,-68,-74,-75,]),'RBRACKET':([43,44,45,53,54,80,82,83,110,112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,129,131,148,158,159,165,166,167,168,169,170,177,178,179,180,],[-53,-54,-55,-76,-77,130,-43,-17,148,-51,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,-52,156,-42,-40,-16,174,177,-56,-57,-58,178,-67,-41,-68,-74,-75,]),'NUMBER':([51,74,75,76,149,150,151,152,153,],[80,111,115,115,165,115,115,115,169,]),'IN':([69,],[105,]),'DOTDOT':([74,111,],[110,149,]),'NUMBERFLOAT':([75,76,150,151,152,],[116,116,116,116,116,]),'WORD':([75,76,150,151,152,],[117,117,117,117,117,]),'TRUE':([75,76,150,151,152,],[118,118,118,118,118,]),'FALSE':([75,76,150,151,152,],[119,119,119,119,119,]),'RUNEVALOR':([75,76,150,151,152,],[120,120,120,120,120,]),'NOTACAOCIENTIFICA':([75,76,150,151,152,],[122,122,122,122,122,]),'BINARY':([75,76,150,151,152,],[123,123,123,123,123,]),'OCTAL':([75,76,150,151,152,],[124,124,124,124,124,]),'HEX':([75,76,150,151,152,],[125,125,125,125,125,]),'SIZEOF':([75,76,150,151,152,],[127,127,127,127,127,]),'TIMES':([112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,166,167,168,170,178,179,180,],[150,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,150,-56,-57,-58,-67,-68,-74,-75,]),'DIVIDE':([112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,166,167,168,170,178,179,180,],[151,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,151,-56,-57,-58,-67,-68,-74,-75,]),'MOD':([112,113,114,115,116,117,118,119,120,122,123,124,125,126,128,166,167,168,170,178,179,180,],[152,-59,-60,-61,-62,-63,-64,-65,-66,-69,-70,-71,-72,-73,152,-56,-57,-58,-67,-68,-74,-75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_import':([0,12,],[2,19,]),'program_items':([0,2,5,],[3,11,13,]),'program_item':([0,2,5,],[5,5,5,]),'const_declaration':([0,2,5,],[6,6,6,]),'function_definition':([0,2,5,],[7,7,7,]),'signature':([0,2,5,],[9,9,9,]),'block_statement':([9,16,66,70,136,145,176,],[15,21,95,107,161,162,182,]),'statements':([17,24,],[22,47,]),'statement':([17,24,],[24,24,]),'var_statement':([17,24,],[25,25,]),'var_assignment':([17,24,],[26,26,]),'list_statement':([17,24,],[27,27,]),'list_assignment':([17,24,],[28,28,]),'func_call':([17,20,24,35,38,39,49,50,52,55,56,57,58,59,60,61,62,63,64,68,78,94,96,97,98,99,100,101,102,103,105,106,121,132,134,155,157,],[29,44,29,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'if_statement':([17,24,136,],[30,30,160,]),'for_statement':([17,24,],[31,31,]),'increment_rule':([17,20,24,35,38,39,49,50,52,55,56,57,58,59,60,61,62,63,64,68,78,94,96,97,98,99,100,101,102,103,105,106,121,132,134,155,157,163,],[32,43,32,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,176,]),'assignment':([17,24,],[33,33,]),'expression':([20,35,38,39,49,50,52,55,56,57,58,59,60,61,62,63,64,68,78,94,96,97,98,99,100,101,102,103,105,106,121,132,134,155,157,],[42,48,67,67,77,79,83,84,85,86,87,88,89,90,91,92,93,104,83,133,137,138,139,140,141,142,143,144,145,67,154,83,83,171,173,]),'list_call':([20,35,38,39,49,50,52,55,56,57,58,59,60,61,62,63,64,68,78,94,96,97,98,99,100,101,102,103,105,106,121,132,134,155,157,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'expression_relacional':([38,39,106,],[66,70,146,]),'sigparams':([40,147,],[72,164,]),'params':([52,78,132,134,],[81,129,158,159,]),'term':([75,76,],[112,128,]),'factor':([75,76,150,151,152,],[113,113,166,167,168,]),'size_of_expression':([75,76,150,151,152,],[126,126,126,126,126,]),'elseop':([95,],[135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_import program_items','program',2,'p_program1','ExpressionLanguageParser.py',6),
  ('program -> program_items','program',1,'p_program2','ExpressionLanguageParser.py',10),
  ('program_import -> IMPORT ID program_import','program_import',3,'p_program_import1','ExpressionLanguageParser.py',14),
  ('program_import -> IMPORT ID','program_import',2,'p_program_import2','ExpressionLanguageParser.py',18),
  ('program_items -> program_item program_items','program_items',2,'p_program_sequence_items','ExpressionLanguageParser.py',22),
  ('program_items -> program_item','program_items',1,'p_program_single_item','ExpressionLanguageParser.py',26),
  ('program_item -> const_declaration','program_item',1,'p_program_item_const','ExpressionLanguageParser.py',30),
  ('program_item -> function_definition','program_item',1,'p_program_item_function','ExpressionLanguageParser.py',34),
  ('const_declaration -> CONST ID DECLARE_ASSIGN expression','const_declaration',4,'p_program_const_declaration_rule','ExpressionLanguageParser.py',38),
  ('function_definition -> signature block_statement','function_definition',2,'p_function_definition1','ExpressionLanguageParser.py',42),
  ('function_definition -> signature ID block_statement','function_definition',3,'p_function_definition2','ExpressionLanguageParser.py',46),
  ('signature -> FN ID LPAREN sigparams RPAREN','signature',5,'p_signature1','ExpressionLanguageParser.py',50),
  ('signature -> FN ID LPAREN RPAREN','signature',4,'p_signature2','ExpressionLanguageParser.py',54),
  ('sigparams -> ID ID','sigparams',2,'p_single_sigparams','ExpressionLanguageParser.py',58),
  ('sigparams -> ID ID COMMA sigparams','sigparams',4,'p_sequence_sigparams','ExpressionLanguageParser.py',62),
  ('params -> expression COMMA params','params',3,'p_sequence_params','ExpressionLanguageParser.py',66),
  ('params -> expression','params',1,'p_single_params','ExpressionLanguageParser.py',70),
  ('block_statement -> LBRACE statements RBRACE','block_statement',3,'p_block_statement','ExpressionLanguageParser.py',74),
  ('block_statement -> LBRACE RBRACE','block_statement',2,'p_none_block_statement','ExpressionLanguageParser.py',78),
  ('statements -> statement statements','statements',2,'p_sequence_statements','ExpressionLanguageParser.py',82),
  ('statements -> statement','statements',1,'p_single_statement','ExpressionLanguageParser.py',86),
  ('statement -> var_statement','statement',1,'p_statement1','ExpressionLanguageParser.py',90),
  ('statement -> var_assignment','statement',1,'p_statement2','ExpressionLanguageParser.py',94),
  ('statement -> list_statement','statement',1,'p_statement3','ExpressionLanguageParser.py',98),
  ('statement -> list_assignment','statement',1,'p_statement4','ExpressionLanguageParser.py',102),
  ('statement -> func_call','statement',1,'p_statement5','ExpressionLanguageParser.py',106),
  ('statement -> if_statement','statement',1,'p_statement6','ExpressionLanguageParser.py',110),
  ('statement -> for_statement','statement',1,'p_statement7','ExpressionLanguageParser.py',114),
  ('statement -> increment_rule','statement',1,'p_statement8','ExpressionLanguageParser.py',118),
  ('statement -> assignment','statement',1,'p_statement9','ExpressionLanguageParser.py',122),
  ('statement -> BREAK','statement',1,'p_statement10','ExpressionLanguageParser.py',126),
  ('statement -> RETURN expression','statement',2,'p_statement11','ExpressionLanguageParser.py',130),
  ('var_statement -> ID DECLARE_ASSIGN expression','var_statement',3,'p_var_declaration1','ExpressionLanguageParser.py',134),
  ('var_statement -> MUT ID DECLARE_ASSIGN expression','var_statement',4,'p_var_declaration2','ExpressionLanguageParser.py',138),
  ('var_assignment -> ID ASSIGN expression','var_assignment',3,'p_var_assignment','ExpressionLanguageParser.py',142),
  ('list_statement -> ID DECLARE_ASSIGN LBRACKET params RBRACKET','list_statement',5,'p_list_declaration_imutable','ExpressionLanguageParser.py',146),
  ('list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET','list_statement',6,'p_list_declaration_mutable','ExpressionLanguageParser.py',150),
  ('list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET ID','list_statement',7,'p_list_declaration_mutable_list_lenght_definition','ExpressionLanguageParser.py',154),
  ('list_assignment -> ID LBRACKET NUMBER RBRACKET ASSIGN expression','list_assignment',6,'p_list_assignment','ExpressionLanguageParser.py',158),
  ('list_call -> ID LBRACKET DOTDOT RBRACKET','list_call',4,'p_list_call1','ExpressionLanguageParser.py',162),
  ('list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET','list_call',6,'p_list_call2','ExpressionLanguageParser.py',166),
  ('func_call -> ID LPAREN params RPAREN','func_call',4,'p_func_call','ExpressionLanguageParser.py',174),
  ('func_call -> ID LPAREN RPAREN','func_call',3,'p_func_call_empty','ExpressionLanguageParser.py',178),
  ('if_statement -> IF expression_relacional block_statement','if_statement',3,'p_if_statement','ExpressionLanguageParser.py',182),
  ('if_statement -> IF expression_relacional block_statement elseop','if_statement',4,'p_if_statement_else','ExpressionLanguageParser.py',186),
  ('elseop -> ELSE if_statement','elseop',2,'p_else','ExpressionLanguageParser.py',190),
  ('elseop -> ELSE block_statement','elseop',2,'p_else2','ExpressionLanguageParser.py',194),
  ('for_statement -> FOR ID IN expression block_statement','for_statement',5,'p_for_each_statement','ExpressionLanguageParser.py',198),
  ('for_statement -> FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement','for_statement',7,'p_for_statement','ExpressionLanguageParser.py',202),
  ('for_statement -> FOR expression_relacional block_statement','for_statement',3,'p_for_statement2','ExpressionLanguageParser.py',206),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','ExpressionLanguageParser.py',210),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','ExpressionLanguageParser.py',214),
  ('expression -> increment_rule','expression',1,'p_expression_increment','ExpressionLanguageParser.py',218),
  ('expression -> func_call','expression',1,'p_expression_func_call','ExpressionLanguageParser.py',222),
  ('expression -> list_call','expression',1,'p_expression_call_list','ExpressionLanguageParser.py',226),
  ('term -> term TIMES factor','term',3,'p_term_mult','ExpressionLanguageParser.py',230),
  ('term -> term DIVIDE factor','term',3,'p_term_divide','ExpressionLanguageParser.py',234),
  ('term -> term MOD factor','term',3,'p_term_mod','ExpressionLanguageParser.py',238),
  ('term -> factor','term',1,'p_term_factor','ExpressionLanguageParser.py',242),
  ('factor -> ID','factor',1,'p_factor_id','ExpressionLanguageParser.py',246),
  ('factor -> NUMBER','factor',1,'p_factor_number','ExpressionLanguageParser.py',250),
  ('factor -> NUMBERFLOAT','factor',1,'p_factor_number_float','ExpressionLanguageParser.py',254),
  ('factor -> WORD','factor',1,'p_factor_string','ExpressionLanguageParser.py',258),
  ('factor -> TRUE','factor',1,'p_factor_true','ExpressionLanguageParser.py',262),
  ('factor -> FALSE','factor',1,'p_factor_false','ExpressionLanguageParser.py',266),
  ('factor -> RUNEVALOR','factor',1,'p_factor_rune','ExpressionLanguageParser.py',270),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expression','ExpressionLanguageParser.py',274),
  ('factor -> ID LBRACKET NUMBER RBRACKET','factor',4,'p_factor_list','ExpressionLanguageParser.py',278),
  ('factor -> NOTACAOCIENTIFICA','factor',1,'p_factor_cientific_notation','ExpressionLanguageParser.py',282),
  ('factor -> BINARY','factor',1,'p_factor_binary','ExpressionLanguageParser.py',286),
  ('factor -> OCTAL','factor',1,'p_factor_octal','ExpressionLanguageParser.py',290),
  ('factor -> HEX','factor',1,'p_factor_hex','ExpressionLanguageParser.py',294),
  ('factor -> size_of_expression','factor',1,'p_factor_size_of_expression_rule','ExpressionLanguageParser.py',298),
  ('size_of_expression -> SIZEOF LPAREN expression RPAREN','size_of_expression',4,'p_size_of_expression','ExpressionLanguageParser.py',302),
  ('size_of_expression -> SIZEOF LPAREN ID RPAREN','size_of_expression',4,'p_size_of_type','ExpressionLanguageParser.py',306),
  ('increment_rule -> ID INCREMENT','increment_rule',2,'p_increment_plus','ExpressionLanguageParser.py',310),
  ('increment_rule -> ID DECREMENT','increment_rule',2,'p_increment_minus','ExpressionLanguageParser.py',314),
  ('expression_relacional -> expression EQ expression','expression_relacional',3,'p_expression_relacional_equals','ExpressionLanguageParser.py',318),
  ('expression_relacional -> expression NEQ expression','expression_relacional',3,'p_expression_relacional_not_equals','ExpressionLanguageParser.py',322),
  ('expression_relacional -> expression LT expression','expression_relacional',3,'p_expression_relacional_less_than','ExpressionLanguageParser.py',326),
  ('expression_relacional -> expression LE expression','expression_relacional',3,'p_expression_relacional_less_than_or_equal','ExpressionLanguageParser.py',330),
  ('expression_relacional -> expression GT expression','expression_relacional',3,'p_expression_relacional_greater_than','ExpressionLanguageParser.py',334),
  ('expression_relacional -> expression GE expression','expression_relacional',3,'p_expression_relacional_greater_than_or_equal','ExpressionLanguageParser.py',338),
  ('expression_relacional -> expression AND expression','expression_relacional',3,'p_expression_relacional_and','ExpressionLanguageParser.py',342),
  ('expression_relacional -> expression OR expression','expression_relacional',3,'p_expression_relacional_or','ExpressionLanguageParser.py',346),
  ('expression_relacional -> NOT expression','expression_relacional',2,'p_expression_relacional_not','ExpressionLanguageParser.py',350),
  ('assignment -> ID PLUS_ASSIGN expression','assignment',3,'p_assignment_plus_equals','ExpressionLanguageParser.py',354),
  ('assignment -> ID MINUS_ASSIGN expression','assignment',3,'p_assignment_minus_equal','ExpressionLanguageParser.py',358),
  ('assignment -> ID TIMES_ASSIGN expression','assignment',3,'p_assignment_multiply_equals','ExpressionLanguageParser.py',362),
  ('assignment -> ID DIVIDE_ASSIGN expression','assignment',3,'p_assignment_divide_equals','ExpressionLanguageParser.py',366),
  ('assignment -> ID MOD_ASSIGN expression','assignment',3,'p_assignment_mod_equals','ExpressionLanguageParser.py',370),
  ('assignment -> ID BIT_AND_ASSIGN expression','assignment',3,'p_assignment_and_equals','ExpressionLanguageParser.py',374),
  ('assignment -> ID BIT_OR_ASSIGN expression','assignment',3,'p_assignment_or_equals','ExpressionLanguageParser.py',378),
  ('assignment -> ID BIT_XOR_ASSIGN expression','assignment',3,'p_assignment_exp_equals','ExpressionLanguageParser.py',382),
  ('assignment -> ID BIT_LSHIFT_ASSIGN expression','assignment',3,'p_assignment_lshift','ExpressionLanguageParser.py',386),
  ('assignment -> ID BIT_RSHIFT_ASSIGN expression','assignment',3,'p_assignment_rshift','ExpressionLanguageParser.py',390),
]
