Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    F32
    F64
    INT
    INTERPOLATIONSTRING
    MAIN
    RUNE
    STRING

Grammar

Rule 0     S' -> program
Rule 1     program -> program_import program_items
Rule 2     program -> program_items
Rule 3     program_import -> IMPORT ID program_import
Rule 4     program_import -> IMPORT ID
Rule 5     program_items -> program_item program_items
Rule 6     program_items -> program_item
Rule 7     program_item -> const_declaration
Rule 8     program_item -> function_definition
Rule 9     const_declaration -> CONST ID DECLARE_ASSIGN expression
Rule 10    function_definition -> signature block_statement
Rule 11    function_definition -> signature ID block_statement
Rule 12    signature -> FN ID LPAREN sigparams RPAREN
Rule 13    signature -> FN ID LPAREN RPAREN
Rule 14    sigparams -> ID ID
Rule 15    sigparams -> ID ID COMMA sigparams
Rule 16    params -> expression COMMA params
Rule 17    params -> expression
Rule 18    block_statement -> LBRACE statements RBRACE
Rule 19    block_statement -> LBRACE RBRACE
Rule 20    statements -> statement statements
Rule 21    statements -> statement
Rule 22    statement -> var_statement
Rule 23    statement -> var_assignment
Rule 24    statement -> list_statement
Rule 25    statement -> list_assignment
Rule 26    statement -> func_call
Rule 27    statement -> if_statement
Rule 28    statement -> for_statement
Rule 29    statement -> increment_rule
Rule 30    statement -> assignment
Rule 31    statement -> BREAK
Rule 32    statement -> RETURN expression
Rule 33    var_statement -> ID DECLARE_ASSIGN expression
Rule 34    var_statement -> MUT ID DECLARE_ASSIGN expression
Rule 35    var_assignment -> ID ASSIGN expression
Rule 36    list_statement -> ID DECLARE_ASSIGN LBRACKET params RBRACKET
Rule 37    list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET
Rule 38    list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET ID
Rule 39    list_assignment -> ID LBRACKET NUMBER RBRACKET ASSIGN expression
Rule 40    list_call -> ID LBRACKET DOTDOT RBRACKET
Rule 41    list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET
Rule 42    func_call -> ID LPAREN params RPAREN
Rule 43    func_call -> ID LPAREN RPAREN
Rule 44    if_statement -> IF expression_relacional block_statement
Rule 45    if_statement -> IF expression_relacional block_statement elseop
Rule 46    elseop -> ELSE if_statement
Rule 47    elseop -> ELSE block_statement
Rule 48    for_statement -> FOR ID IN expression block_statement
Rule 49    for_statement -> FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement
Rule 50    for_statement -> FOR expression_relacional block_statement
Rule 51    expression -> expression PLUS term
Rule 52    expression -> expression MINUS term
Rule 53    expression -> increment_rule
Rule 54    expression -> func_call
Rule 55    expression -> list_call
Rule 56    term -> term TIMES factor
Rule 57    term -> term DIVIDE factor
Rule 58    term -> term MOD factor
Rule 59    term -> factor
Rule 60    factor -> ID
Rule 61    factor -> NUMBER
Rule 62    factor -> NUMBERFLOAT
Rule 63    factor -> WORD
Rule 64    factor -> TRUE
Rule 65    factor -> FALSE
Rule 66    factor -> RUNEVALOR
Rule 67    factor -> LPAREN expression RPAREN
Rule 68    factor -> ID LBRACKET NUMBER RBRACKET
Rule 69    factor -> NOTACAOCIENTIFICA
Rule 70    factor -> BINARY
Rule 71    factor -> OCTAL
Rule 72    factor -> HEX
Rule 73    factor -> size_of_expression
Rule 74    size_of_expression -> SIZEOF LPAREN expression RPAREN
Rule 75    size_of_expression -> SIZEOF LPAREN ID RPAREN
Rule 76    increment_rule -> ID INCREMENT
Rule 77    increment_rule -> ID DECREMENT
Rule 78    expression_relacional -> expression EQ expression
Rule 79    expression_relacional -> expression NEQ expression
Rule 80    expression_relacional -> expression LT expression
Rule 81    expression_relacional -> expression LE expression
Rule 82    expression_relacional -> expression GT expression
Rule 83    expression_relacional -> expression GE expression
Rule 84    expression_relacional -> expression AND expression
Rule 85    expression_relacional -> expression OR expression
Rule 86    expression_relacional -> NOT expression
Rule 87    assignment -> ID PLUS_ASSIGN expression
Rule 88    assignment -> ID MINUS_ASSIGN expression
Rule 89    assignment -> ID TIMES_ASSIGN expression
Rule 90    assignment -> ID DIVIDE_ASSIGN expression
Rule 91    assignment -> ID MOD_ASSIGN expression
Rule 92    assignment -> ID BIT_AND_ASSIGN expression
Rule 93    assignment -> ID BIT_OR_ASSIGN expression
Rule 94    assignment -> ID BIT_XOR_ASSIGN expression
Rule 95    assignment -> ID BIT_LSHIFT_ASSIGN expression
Rule 96    assignment -> ID BIT_RSHIFT_ASSIGN expression

Terminals, with rules where they appear

AND                  : 84
ASSIGN               : 35 39
BINARY               : 70
BIT_AND_ASSIGN       : 92
BIT_LSHIFT_ASSIGN    : 95
BIT_OR_ASSIGN        : 93
BIT_RSHIFT_ASSIGN    : 96
BIT_XOR_ASSIGN       : 94
BOOL                 : 
BREAK                : 31
COMMA                : 15 16
CONST                : 9
DECLARE_ASSIGN       : 9 33 34 36 37 38
DECREMENT            : 77
DIVIDE               : 57
DIVIDE_ASSIGN        : 90
DOTDOT               : 40 41
ELSE                 : 46 47
EQ                   : 78
F32                  : 
F64                  : 
FALSE                : 65
FN                   : 12 13
FOR                  : 48 49 50
GE                   : 83
GT                   : 82
HEX                  : 72
ID                   : 3 4 9 11 12 13 14 14 15 15 33 34 35 36 37 38 38 39 40 41 42 43 48 49 60 68 75 76 77 87 88 89 90 91 92 93 94 95 96
IF                   : 44 45
IMPORT               : 3 4
IN                   : 48
INCREMENT            : 76
INT                  : 
INTERPOLATIONSTRING  : 
LBRACE               : 18 19
LBRACKET             : 36 37 38 39 40 41 68
LE                   : 81
LPAREN               : 12 13 42 43 67 74 75
LT                   : 80
MAIN                 : 
MINUS                : 52
MINUS_ASSIGN         : 88
MOD                  : 58
MOD_ASSIGN           : 91
MUT                  : 34 37 38
NEQ                  : 79
NOT                  : 86
NOTACAOCIENTIFICA    : 69
NUMBER               : 39 41 41 61 68
NUMBERFLOAT          : 62
OCTAL                : 71
OR                   : 85
PLUS                 : 51
PLUS_ASSIGN          : 87
RBRACE               : 18 19
RBRACKET             : 36 37 38 39 40 41 68
RETURN               : 32
RPAREN               : 12 13 42 43 67 74 75
RUNE                 : 
RUNEVALOR            : 66
SEMICOLON            : 49 49
SIZEOF               : 74 75
STRING               : 
TIMES                : 56
TIMES_ASSIGN         : 89
TRUE                 : 64
WORD                 : 63
error                : 

Nonterminals, with rules where they appear

assignment           : 30
block_statement      : 10 11 44 45 47 48 49 50
const_declaration    : 7
elseop               : 45
expression           : 9 16 17 32 33 34 35 39 48 51 52 67 74 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 87 88 89 90 91 92 93 94 95 96
expression_relacional : 44 45 49 50
factor               : 56 57 58 59
for_statement        : 28
func_call            : 26 54
function_definition  : 8
if_statement         : 27 46
increment_rule       : 29 49 53
list_assignment      : 25
list_call            : 55
list_statement       : 24
params               : 16 36 37 38 42
program              : 0
program_import       : 1 3
program_item         : 5 6
program_items        : 1 2 5
signature            : 10 11
sigparams            : 12 15
size_of_expression   : 73
statement            : 20 21
statements           : 18 20
term                 : 51 52 56 57 58
var_assignment       : 23
var_statement        : 22

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_import program_items
    (2) program -> . program_items
    (3) program_import -> . IMPORT ID program_import
    (4) program_import -> . IMPORT ID
    (5) program_items -> . program_item program_items
    (6) program_items -> . program_item
    (7) program_item -> . const_declaration
    (8) program_item -> . function_definition
    (9) const_declaration -> . CONST ID DECLARE_ASSIGN expression
    (10) function_definition -> . signature block_statement
    (11) function_definition -> . signature ID block_statement
    (12) signature -> . FN ID LPAREN sigparams RPAREN
    (13) signature -> . FN ID LPAREN RPAREN

    IMPORT          shift and go to state 4
    CONST           shift and go to state 8
    FN              shift and go to state 10

    program                        shift and go to state 1
    program_import                 shift and go to state 2
    program_items                  shift and go to state 3
    program_item                   shift and go to state 5
    const_declaration              shift and go to state 6
    function_definition            shift and go to state 7
    signature                      shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> program_import . program_items
    (5) program_items -> . program_item program_items
    (6) program_items -> . program_item
    (7) program_item -> . const_declaration
    (8) program_item -> . function_definition
    (9) const_declaration -> . CONST ID DECLARE_ASSIGN expression
    (10) function_definition -> . signature block_statement
    (11) function_definition -> . signature ID block_statement
    (12) signature -> . FN ID LPAREN sigparams RPAREN
    (13) signature -> . FN ID LPAREN RPAREN

    CONST           shift and go to state 8
    FN              shift and go to state 10

    program_items                  shift and go to state 11
    program_item                   shift and go to state 5
    const_declaration              shift and go to state 6
    function_definition            shift and go to state 7
    signature                      shift and go to state 9

state 3

    (2) program -> program_items .

    $end            reduce using rule 2 (program -> program_items .)


state 4

    (3) program_import -> IMPORT . ID program_import
    (4) program_import -> IMPORT . ID

    ID              shift and go to state 12


state 5

    (5) program_items -> program_item . program_items
    (6) program_items -> program_item .
    (5) program_items -> . program_item program_items
    (6) program_items -> . program_item
    (7) program_item -> . const_declaration
    (8) program_item -> . function_definition
    (9) const_declaration -> . CONST ID DECLARE_ASSIGN expression
    (10) function_definition -> . signature block_statement
    (11) function_definition -> . signature ID block_statement
    (12) signature -> . FN ID LPAREN sigparams RPAREN
    (13) signature -> . FN ID LPAREN RPAREN

    $end            reduce using rule 6 (program_items -> program_item .)
    CONST           shift and go to state 8
    FN              shift and go to state 10

    program_item                   shift and go to state 5
    program_items                  shift and go to state 13
    const_declaration              shift and go to state 6
    function_definition            shift and go to state 7
    signature                      shift and go to state 9

state 6

    (7) program_item -> const_declaration .

    CONST           reduce using rule 7 (program_item -> const_declaration .)
    FN              reduce using rule 7 (program_item -> const_declaration .)
    $end            reduce using rule 7 (program_item -> const_declaration .)


state 7

    (8) program_item -> function_definition .

    CONST           reduce using rule 8 (program_item -> function_definition .)
    FN              reduce using rule 8 (program_item -> function_definition .)
    $end            reduce using rule 8 (program_item -> function_definition .)


state 8

    (9) const_declaration -> CONST . ID DECLARE_ASSIGN expression

    ID              shift and go to state 14


state 9

    (10) function_definition -> signature . block_statement
    (11) function_definition -> signature . ID block_statement
    (18) block_statement -> . LBRACE statements RBRACE
    (19) block_statement -> . LBRACE RBRACE

    ID              shift and go to state 16
    LBRACE          shift and go to state 17

    block_statement                shift and go to state 15

state 10

    (12) signature -> FN . ID LPAREN sigparams RPAREN
    (13) signature -> FN . ID LPAREN RPAREN

    ID              shift and go to state 18


state 11

    (1) program -> program_import program_items .

    $end            reduce using rule 1 (program -> program_import program_items .)


state 12

    (3) program_import -> IMPORT ID . program_import
    (4) program_import -> IMPORT ID .
    (3) program_import -> . IMPORT ID program_import
    (4) program_import -> . IMPORT ID

    CONST           reduce using rule 4 (program_import -> IMPORT ID .)
    FN              reduce using rule 4 (program_import -> IMPORT ID .)
    IMPORT          shift and go to state 4

    program_import                 shift and go to state 19

state 13

    (5) program_items -> program_item program_items .

    $end            reduce using rule 5 (program_items -> program_item program_items .)


state 14

    (9) const_declaration -> CONST ID . DECLARE_ASSIGN expression

    DECLARE_ASSIGN  shift and go to state 20


state 15

    (10) function_definition -> signature block_statement .

    CONST           reduce using rule 10 (function_definition -> signature block_statement .)
    FN              reduce using rule 10 (function_definition -> signature block_statement .)
    $end            reduce using rule 10 (function_definition -> signature block_statement .)


state 16

    (11) function_definition -> signature ID . block_statement
    (18) block_statement -> . LBRACE statements RBRACE
    (19) block_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 17

    block_statement                shift and go to state 21

state 17

    (18) block_statement -> LBRACE . statements RBRACE
    (19) block_statement -> LBRACE . RBRACE
    (20) statements -> . statement statements
    (21) statements -> . statement
    (22) statement -> . var_statement
    (23) statement -> . var_assignment
    (24) statement -> . list_statement
    (25) statement -> . list_assignment
    (26) statement -> . func_call
    (27) statement -> . if_statement
    (28) statement -> . for_statement
    (29) statement -> . increment_rule
    (30) statement -> . assignment
    (31) statement -> . BREAK
    (32) statement -> . RETURN expression
    (33) var_statement -> . ID DECLARE_ASSIGN expression
    (34) var_statement -> . MUT ID DECLARE_ASSIGN expression
    (35) var_assignment -> . ID ASSIGN expression
    (36) list_statement -> . ID DECLARE_ASSIGN LBRACKET params RBRACKET
    (37) list_statement -> . MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET
    (38) list_statement -> . MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET ID
    (39) list_assignment -> . ID LBRACKET NUMBER RBRACKET ASSIGN expression
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (44) if_statement -> . IF expression_relacional block_statement
    (45) if_statement -> . IF expression_relacional block_statement elseop
    (48) for_statement -> . FOR ID IN expression block_statement
    (49) for_statement -> . FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement
    (50) for_statement -> . FOR expression_relacional block_statement
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (87) assignment -> . ID PLUS_ASSIGN expression
    (88) assignment -> . ID MINUS_ASSIGN expression
    (89) assignment -> . ID TIMES_ASSIGN expression
    (90) assignment -> . ID DIVIDE_ASSIGN expression
    (91) assignment -> . ID MOD_ASSIGN expression
    (92) assignment -> . ID BIT_AND_ASSIGN expression
    (93) assignment -> . ID BIT_OR_ASSIGN expression
    (94) assignment -> . ID BIT_XOR_ASSIGN expression
    (95) assignment -> . ID BIT_LSHIFT_ASSIGN expression
    (96) assignment -> . ID BIT_RSHIFT_ASSIGN expression

    RBRACE          shift and go to state 23
    BREAK           shift and go to state 34
    RETURN          shift and go to state 35
    ID              shift and go to state 36
    MUT             shift and go to state 37
    IF              shift and go to state 38
    FOR             shift and go to state 39

    statements                     shift and go to state 22
    statement                      shift and go to state 24
    var_statement                  shift and go to state 25
    var_assignment                 shift and go to state 26
    list_statement                 shift and go to state 27
    list_assignment                shift and go to state 28
    func_call                      shift and go to state 29
    if_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    increment_rule                 shift and go to state 32
    assignment                     shift and go to state 33

state 18

    (12) signature -> FN ID . LPAREN sigparams RPAREN
    (13) signature -> FN ID . LPAREN RPAREN

    LPAREN          shift and go to state 40


state 19

    (3) program_import -> IMPORT ID program_import .

    CONST           reduce using rule 3 (program_import -> IMPORT ID program_import .)
    FN              reduce using rule 3 (program_import -> IMPORT ID program_import .)


state 20

    (9) const_declaration -> CONST ID DECLARE_ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 42
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 21

    (11) function_definition -> signature ID block_statement .

    CONST           reduce using rule 11 (function_definition -> signature ID block_statement .)
    FN              reduce using rule 11 (function_definition -> signature ID block_statement .)
    $end            reduce using rule 11 (function_definition -> signature ID block_statement .)


state 22

    (18) block_statement -> LBRACE statements . RBRACE

    RBRACE          shift and go to state 46


state 23

    (19) block_statement -> LBRACE RBRACE .

    CONST           reduce using rule 19 (block_statement -> LBRACE RBRACE .)
    FN              reduce using rule 19 (block_statement -> LBRACE RBRACE .)
    $end            reduce using rule 19 (block_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 19 (block_statement -> LBRACE RBRACE .)
    BREAK           reduce using rule 19 (block_statement -> LBRACE RBRACE .)
    RETURN          reduce using rule 19 (block_statement -> LBRACE RBRACE .)
    ID              reduce using rule 19 (block_statement -> LBRACE RBRACE .)
    MUT             reduce using rule 19 (block_statement -> LBRACE RBRACE .)
    IF              reduce using rule 19 (block_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 19 (block_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 19 (block_statement -> LBRACE RBRACE .)


state 24

    (20) statements -> statement . statements
    (21) statements -> statement .
    (20) statements -> . statement statements
    (21) statements -> . statement
    (22) statement -> . var_statement
    (23) statement -> . var_assignment
    (24) statement -> . list_statement
    (25) statement -> . list_assignment
    (26) statement -> . func_call
    (27) statement -> . if_statement
    (28) statement -> . for_statement
    (29) statement -> . increment_rule
    (30) statement -> . assignment
    (31) statement -> . BREAK
    (32) statement -> . RETURN expression
    (33) var_statement -> . ID DECLARE_ASSIGN expression
    (34) var_statement -> . MUT ID DECLARE_ASSIGN expression
    (35) var_assignment -> . ID ASSIGN expression
    (36) list_statement -> . ID DECLARE_ASSIGN LBRACKET params RBRACKET
    (37) list_statement -> . MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET
    (38) list_statement -> . MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET ID
    (39) list_assignment -> . ID LBRACKET NUMBER RBRACKET ASSIGN expression
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (44) if_statement -> . IF expression_relacional block_statement
    (45) if_statement -> . IF expression_relacional block_statement elseop
    (48) for_statement -> . FOR ID IN expression block_statement
    (49) for_statement -> . FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement
    (50) for_statement -> . FOR expression_relacional block_statement
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (87) assignment -> . ID PLUS_ASSIGN expression
    (88) assignment -> . ID MINUS_ASSIGN expression
    (89) assignment -> . ID TIMES_ASSIGN expression
    (90) assignment -> . ID DIVIDE_ASSIGN expression
    (91) assignment -> . ID MOD_ASSIGN expression
    (92) assignment -> . ID BIT_AND_ASSIGN expression
    (93) assignment -> . ID BIT_OR_ASSIGN expression
    (94) assignment -> . ID BIT_XOR_ASSIGN expression
    (95) assignment -> . ID BIT_LSHIFT_ASSIGN expression
    (96) assignment -> . ID BIT_RSHIFT_ASSIGN expression

    RBRACE          reduce using rule 21 (statements -> statement .)
    BREAK           shift and go to state 34
    RETURN          shift and go to state 35
    ID              shift and go to state 36
    MUT             shift and go to state 37
    IF              shift and go to state 38
    FOR             shift and go to state 39

    statement                      shift and go to state 24
    statements                     shift and go to state 47
    var_statement                  shift and go to state 25
    var_assignment                 shift and go to state 26
    list_statement                 shift and go to state 27
    list_assignment                shift and go to state 28
    func_call                      shift and go to state 29
    if_statement                   shift and go to state 30
    for_statement                  shift and go to state 31
    increment_rule                 shift and go to state 32
    assignment                     shift and go to state 33

state 25

    (22) statement -> var_statement .

    BREAK           reduce using rule 22 (statement -> var_statement .)
    RETURN          reduce using rule 22 (statement -> var_statement .)
    ID              reduce using rule 22 (statement -> var_statement .)
    MUT             reduce using rule 22 (statement -> var_statement .)
    IF              reduce using rule 22 (statement -> var_statement .)
    FOR             reduce using rule 22 (statement -> var_statement .)
    RBRACE          reduce using rule 22 (statement -> var_statement .)


state 26

    (23) statement -> var_assignment .

    BREAK           reduce using rule 23 (statement -> var_assignment .)
    RETURN          reduce using rule 23 (statement -> var_assignment .)
    ID              reduce using rule 23 (statement -> var_assignment .)
    MUT             reduce using rule 23 (statement -> var_assignment .)
    IF              reduce using rule 23 (statement -> var_assignment .)
    FOR             reduce using rule 23 (statement -> var_assignment .)
    RBRACE          reduce using rule 23 (statement -> var_assignment .)


state 27

    (24) statement -> list_statement .

    BREAK           reduce using rule 24 (statement -> list_statement .)
    RETURN          reduce using rule 24 (statement -> list_statement .)
    ID              reduce using rule 24 (statement -> list_statement .)
    MUT             reduce using rule 24 (statement -> list_statement .)
    IF              reduce using rule 24 (statement -> list_statement .)
    FOR             reduce using rule 24 (statement -> list_statement .)
    RBRACE          reduce using rule 24 (statement -> list_statement .)


state 28

    (25) statement -> list_assignment .

    BREAK           reduce using rule 25 (statement -> list_assignment .)
    RETURN          reduce using rule 25 (statement -> list_assignment .)
    ID              reduce using rule 25 (statement -> list_assignment .)
    MUT             reduce using rule 25 (statement -> list_assignment .)
    IF              reduce using rule 25 (statement -> list_assignment .)
    FOR             reduce using rule 25 (statement -> list_assignment .)
    RBRACE          reduce using rule 25 (statement -> list_assignment .)


state 29

    (26) statement -> func_call .

    BREAK           reduce using rule 26 (statement -> func_call .)
    RETURN          reduce using rule 26 (statement -> func_call .)
    ID              reduce using rule 26 (statement -> func_call .)
    MUT             reduce using rule 26 (statement -> func_call .)
    IF              reduce using rule 26 (statement -> func_call .)
    FOR             reduce using rule 26 (statement -> func_call .)
    RBRACE          reduce using rule 26 (statement -> func_call .)


state 30

    (27) statement -> if_statement .

    BREAK           reduce using rule 27 (statement -> if_statement .)
    RETURN          reduce using rule 27 (statement -> if_statement .)
    ID              reduce using rule 27 (statement -> if_statement .)
    MUT             reduce using rule 27 (statement -> if_statement .)
    IF              reduce using rule 27 (statement -> if_statement .)
    FOR             reduce using rule 27 (statement -> if_statement .)
    RBRACE          reduce using rule 27 (statement -> if_statement .)


state 31

    (28) statement -> for_statement .

    BREAK           reduce using rule 28 (statement -> for_statement .)
    RETURN          reduce using rule 28 (statement -> for_statement .)
    ID              reduce using rule 28 (statement -> for_statement .)
    MUT             reduce using rule 28 (statement -> for_statement .)
    IF              reduce using rule 28 (statement -> for_statement .)
    FOR             reduce using rule 28 (statement -> for_statement .)
    RBRACE          reduce using rule 28 (statement -> for_statement .)


state 32

    (29) statement -> increment_rule .

    BREAK           reduce using rule 29 (statement -> increment_rule .)
    RETURN          reduce using rule 29 (statement -> increment_rule .)
    ID              reduce using rule 29 (statement -> increment_rule .)
    MUT             reduce using rule 29 (statement -> increment_rule .)
    IF              reduce using rule 29 (statement -> increment_rule .)
    FOR             reduce using rule 29 (statement -> increment_rule .)
    RBRACE          reduce using rule 29 (statement -> increment_rule .)


state 33

    (30) statement -> assignment .

    BREAK           reduce using rule 30 (statement -> assignment .)
    RETURN          reduce using rule 30 (statement -> assignment .)
    ID              reduce using rule 30 (statement -> assignment .)
    MUT             reduce using rule 30 (statement -> assignment .)
    IF              reduce using rule 30 (statement -> assignment .)
    FOR             reduce using rule 30 (statement -> assignment .)
    RBRACE          reduce using rule 30 (statement -> assignment .)


state 34

    (31) statement -> BREAK .

    BREAK           reduce using rule 31 (statement -> BREAK .)
    RETURN          reduce using rule 31 (statement -> BREAK .)
    ID              reduce using rule 31 (statement -> BREAK .)
    MUT             reduce using rule 31 (statement -> BREAK .)
    IF              reduce using rule 31 (statement -> BREAK .)
    FOR             reduce using rule 31 (statement -> BREAK .)
    RBRACE          reduce using rule 31 (statement -> BREAK .)


state 35

    (32) statement -> RETURN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 48
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 36

    (33) var_statement -> ID . DECLARE_ASSIGN expression
    (35) var_assignment -> ID . ASSIGN expression
    (36) list_statement -> ID . DECLARE_ASSIGN LBRACKET params RBRACKET
    (39) list_assignment -> ID . LBRACKET NUMBER RBRACKET ASSIGN expression
    (42) func_call -> ID . LPAREN params RPAREN
    (43) func_call -> ID . LPAREN RPAREN
    (76) increment_rule -> ID . INCREMENT
    (77) increment_rule -> ID . DECREMENT
    (87) assignment -> ID . PLUS_ASSIGN expression
    (88) assignment -> ID . MINUS_ASSIGN expression
    (89) assignment -> ID . TIMES_ASSIGN expression
    (90) assignment -> ID . DIVIDE_ASSIGN expression
    (91) assignment -> ID . MOD_ASSIGN expression
    (92) assignment -> ID . BIT_AND_ASSIGN expression
    (93) assignment -> ID . BIT_OR_ASSIGN expression
    (94) assignment -> ID . BIT_XOR_ASSIGN expression
    (95) assignment -> ID . BIT_LSHIFT_ASSIGN expression
    (96) assignment -> ID . BIT_RSHIFT_ASSIGN expression

    DECLARE_ASSIGN  shift and go to state 49
    ASSIGN          shift and go to state 50
    LBRACKET        shift and go to state 51
    LPAREN          shift and go to state 52
    INCREMENT       shift and go to state 53
    DECREMENT       shift and go to state 54
    PLUS_ASSIGN     shift and go to state 55
    MINUS_ASSIGN    shift and go to state 56
    TIMES_ASSIGN    shift and go to state 57
    DIVIDE_ASSIGN   shift and go to state 58
    MOD_ASSIGN      shift and go to state 59
    BIT_AND_ASSIGN  shift and go to state 60
    BIT_OR_ASSIGN   shift and go to state 61
    BIT_XOR_ASSIGN  shift and go to state 62
    BIT_LSHIFT_ASSIGN shift and go to state 63
    BIT_RSHIFT_ASSIGN shift and go to state 64


state 37

    (34) var_statement -> MUT . ID DECLARE_ASSIGN expression
    (37) list_statement -> MUT . ID DECLARE_ASSIGN LBRACKET params RBRACKET
    (38) list_statement -> MUT . ID DECLARE_ASSIGN LBRACKET params RBRACKET ID

    ID              shift and go to state 65


state 38

    (44) if_statement -> IF . expression_relacional block_statement
    (45) if_statement -> IF . expression_relacional block_statement elseop
    (78) expression_relacional -> . expression EQ expression
    (79) expression_relacional -> . expression NEQ expression
    (80) expression_relacional -> . expression LT expression
    (81) expression_relacional -> . expression LE expression
    (82) expression_relacional -> . expression GT expression
    (83) expression_relacional -> . expression GE expression
    (84) expression_relacional -> . expression AND expression
    (85) expression_relacional -> . expression OR expression
    (86) expression_relacional -> . NOT expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    NOT             shift and go to state 68
    ID              shift and go to state 41

    expression_relacional          shift and go to state 66
    expression                     shift and go to state 67
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 39

    (48) for_statement -> FOR . ID IN expression block_statement
    (49) for_statement -> FOR . ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement
    (50) for_statement -> FOR . expression_relacional block_statement
    (78) expression_relacional -> . expression EQ expression
    (79) expression_relacional -> . expression NEQ expression
    (80) expression_relacional -> . expression LT expression
    (81) expression_relacional -> . expression LE expression
    (82) expression_relacional -> . expression GT expression
    (83) expression_relacional -> . expression GE expression
    (84) expression_relacional -> . expression AND expression
    (85) expression_relacional -> . expression OR expression
    (86) expression_relacional -> . NOT expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 69
    NOT             shift and go to state 68

    expression                     shift and go to state 67
    expression_relacional          shift and go to state 70
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 40

    (12) signature -> FN ID LPAREN . sigparams RPAREN
    (13) signature -> FN ID LPAREN . RPAREN
    (14) sigparams -> . ID ID
    (15) sigparams -> . ID ID COMMA sigparams

    RPAREN          shift and go to state 73
    ID              shift and go to state 71

    sigparams                      shift and go to state 72

state 41

    (76) increment_rule -> ID . INCREMENT
    (77) increment_rule -> ID . DECREMENT
    (42) func_call -> ID . LPAREN params RPAREN
    (43) func_call -> ID . LPAREN RPAREN
    (40) list_call -> ID . LBRACKET DOTDOT RBRACKET
    (41) list_call -> ID . LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    INCREMENT       shift and go to state 53
    DECREMENT       shift and go to state 54
    LPAREN          shift and go to state 52
    LBRACKET        shift and go to state 74


state 42

    (9) const_declaration -> CONST ID DECLARE_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    CONST           reduce using rule 9 (const_declaration -> CONST ID DECLARE_ASSIGN expression .)
    FN              reduce using rule 9 (const_declaration -> CONST ID DECLARE_ASSIGN expression .)
    $end            reduce using rule 9 (const_declaration -> CONST ID DECLARE_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 43

    (53) expression -> increment_rule .

    PLUS            reduce using rule 53 (expression -> increment_rule .)
    MINUS           reduce using rule 53 (expression -> increment_rule .)
    CONST           reduce using rule 53 (expression -> increment_rule .)
    FN              reduce using rule 53 (expression -> increment_rule .)
    $end            reduce using rule 53 (expression -> increment_rule .)
    BREAK           reduce using rule 53 (expression -> increment_rule .)
    RETURN          reduce using rule 53 (expression -> increment_rule .)
    ID              reduce using rule 53 (expression -> increment_rule .)
    MUT             reduce using rule 53 (expression -> increment_rule .)
    IF              reduce using rule 53 (expression -> increment_rule .)
    FOR             reduce using rule 53 (expression -> increment_rule .)
    RBRACE          reduce using rule 53 (expression -> increment_rule .)
    EQ              reduce using rule 53 (expression -> increment_rule .)
    NEQ             reduce using rule 53 (expression -> increment_rule .)
    LT              reduce using rule 53 (expression -> increment_rule .)
    LE              reduce using rule 53 (expression -> increment_rule .)
    GT              reduce using rule 53 (expression -> increment_rule .)
    GE              reduce using rule 53 (expression -> increment_rule .)
    AND             reduce using rule 53 (expression -> increment_rule .)
    OR              reduce using rule 53 (expression -> increment_rule .)
    COMMA           reduce using rule 53 (expression -> increment_rule .)
    RPAREN          reduce using rule 53 (expression -> increment_rule .)
    LBRACE          reduce using rule 53 (expression -> increment_rule .)
    SEMICOLON       reduce using rule 53 (expression -> increment_rule .)
    RBRACKET        reduce using rule 53 (expression -> increment_rule .)


state 44

    (54) expression -> func_call .

    PLUS            reduce using rule 54 (expression -> func_call .)
    MINUS           reduce using rule 54 (expression -> func_call .)
    CONST           reduce using rule 54 (expression -> func_call .)
    FN              reduce using rule 54 (expression -> func_call .)
    $end            reduce using rule 54 (expression -> func_call .)
    BREAK           reduce using rule 54 (expression -> func_call .)
    RETURN          reduce using rule 54 (expression -> func_call .)
    ID              reduce using rule 54 (expression -> func_call .)
    MUT             reduce using rule 54 (expression -> func_call .)
    IF              reduce using rule 54 (expression -> func_call .)
    FOR             reduce using rule 54 (expression -> func_call .)
    RBRACE          reduce using rule 54 (expression -> func_call .)
    EQ              reduce using rule 54 (expression -> func_call .)
    NEQ             reduce using rule 54 (expression -> func_call .)
    LT              reduce using rule 54 (expression -> func_call .)
    LE              reduce using rule 54 (expression -> func_call .)
    GT              reduce using rule 54 (expression -> func_call .)
    GE              reduce using rule 54 (expression -> func_call .)
    AND             reduce using rule 54 (expression -> func_call .)
    OR              reduce using rule 54 (expression -> func_call .)
    COMMA           reduce using rule 54 (expression -> func_call .)
    RPAREN          reduce using rule 54 (expression -> func_call .)
    LBRACE          reduce using rule 54 (expression -> func_call .)
    SEMICOLON       reduce using rule 54 (expression -> func_call .)
    RBRACKET        reduce using rule 54 (expression -> func_call .)


state 45

    (55) expression -> list_call .

    PLUS            reduce using rule 55 (expression -> list_call .)
    MINUS           reduce using rule 55 (expression -> list_call .)
    CONST           reduce using rule 55 (expression -> list_call .)
    FN              reduce using rule 55 (expression -> list_call .)
    $end            reduce using rule 55 (expression -> list_call .)
    BREAK           reduce using rule 55 (expression -> list_call .)
    RETURN          reduce using rule 55 (expression -> list_call .)
    ID              reduce using rule 55 (expression -> list_call .)
    MUT             reduce using rule 55 (expression -> list_call .)
    IF              reduce using rule 55 (expression -> list_call .)
    FOR             reduce using rule 55 (expression -> list_call .)
    RBRACE          reduce using rule 55 (expression -> list_call .)
    EQ              reduce using rule 55 (expression -> list_call .)
    NEQ             reduce using rule 55 (expression -> list_call .)
    LT              reduce using rule 55 (expression -> list_call .)
    LE              reduce using rule 55 (expression -> list_call .)
    GT              reduce using rule 55 (expression -> list_call .)
    GE              reduce using rule 55 (expression -> list_call .)
    AND             reduce using rule 55 (expression -> list_call .)
    OR              reduce using rule 55 (expression -> list_call .)
    COMMA           reduce using rule 55 (expression -> list_call .)
    RPAREN          reduce using rule 55 (expression -> list_call .)
    LBRACE          reduce using rule 55 (expression -> list_call .)
    SEMICOLON       reduce using rule 55 (expression -> list_call .)
    RBRACKET        reduce using rule 55 (expression -> list_call .)


state 46

    (18) block_statement -> LBRACE statements RBRACE .

    CONST           reduce using rule 18 (block_statement -> LBRACE statements RBRACE .)
    FN              reduce using rule 18 (block_statement -> LBRACE statements RBRACE .)
    $end            reduce using rule 18 (block_statement -> LBRACE statements RBRACE .)
    ELSE            reduce using rule 18 (block_statement -> LBRACE statements RBRACE .)
    BREAK           reduce using rule 18 (block_statement -> LBRACE statements RBRACE .)
    RETURN          reduce using rule 18 (block_statement -> LBRACE statements RBRACE .)
    ID              reduce using rule 18 (block_statement -> LBRACE statements RBRACE .)
    MUT             reduce using rule 18 (block_statement -> LBRACE statements RBRACE .)
    IF              reduce using rule 18 (block_statement -> LBRACE statements RBRACE .)
    FOR             reduce using rule 18 (block_statement -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 18 (block_statement -> LBRACE statements RBRACE .)


state 47

    (20) statements -> statement statements .

    RBRACE          reduce using rule 20 (statements -> statement statements .)


state 48

    (32) statement -> RETURN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 32 (statement -> RETURN expression .)
    RETURN          reduce using rule 32 (statement -> RETURN expression .)
    ID              reduce using rule 32 (statement -> RETURN expression .)
    MUT             reduce using rule 32 (statement -> RETURN expression .)
    IF              reduce using rule 32 (statement -> RETURN expression .)
    FOR             reduce using rule 32 (statement -> RETURN expression .)
    RBRACE          reduce using rule 32 (statement -> RETURN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 49

    (33) var_statement -> ID DECLARE_ASSIGN . expression
    (36) list_statement -> ID DECLARE_ASSIGN . LBRACKET params RBRACKET
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    LBRACKET        shift and go to state 78
    ID              shift and go to state 41

    expression                     shift and go to state 77
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 50

    (35) var_assignment -> ID ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 79
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 51

    (39) list_assignment -> ID LBRACKET . NUMBER RBRACKET ASSIGN expression

    NUMBER          shift and go to state 80


state 52

    (42) func_call -> ID LPAREN . params RPAREN
    (43) func_call -> ID LPAREN . RPAREN
    (16) params -> . expression COMMA params
    (17) params -> . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    RPAREN          shift and go to state 82
    ID              shift and go to state 41

    params                         shift and go to state 81
    expression                     shift and go to state 83
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 53

    (76) increment_rule -> ID INCREMENT .

    BREAK           reduce using rule 76 (increment_rule -> ID INCREMENT .)
    RETURN          reduce using rule 76 (increment_rule -> ID INCREMENT .)
    ID              reduce using rule 76 (increment_rule -> ID INCREMENT .)
    MUT             reduce using rule 76 (increment_rule -> ID INCREMENT .)
    IF              reduce using rule 76 (increment_rule -> ID INCREMENT .)
    FOR             reduce using rule 76 (increment_rule -> ID INCREMENT .)
    RBRACE          reduce using rule 76 (increment_rule -> ID INCREMENT .)
    PLUS            reduce using rule 76 (increment_rule -> ID INCREMENT .)
    MINUS           reduce using rule 76 (increment_rule -> ID INCREMENT .)
    CONST           reduce using rule 76 (increment_rule -> ID INCREMENT .)
    FN              reduce using rule 76 (increment_rule -> ID INCREMENT .)
    $end            reduce using rule 76 (increment_rule -> ID INCREMENT .)
    EQ              reduce using rule 76 (increment_rule -> ID INCREMENT .)
    NEQ             reduce using rule 76 (increment_rule -> ID INCREMENT .)
    LT              reduce using rule 76 (increment_rule -> ID INCREMENT .)
    LE              reduce using rule 76 (increment_rule -> ID INCREMENT .)
    GT              reduce using rule 76 (increment_rule -> ID INCREMENT .)
    GE              reduce using rule 76 (increment_rule -> ID INCREMENT .)
    AND             reduce using rule 76 (increment_rule -> ID INCREMENT .)
    OR              reduce using rule 76 (increment_rule -> ID INCREMENT .)
    COMMA           reduce using rule 76 (increment_rule -> ID INCREMENT .)
    RPAREN          reduce using rule 76 (increment_rule -> ID INCREMENT .)
    LBRACE          reduce using rule 76 (increment_rule -> ID INCREMENT .)
    SEMICOLON       reduce using rule 76 (increment_rule -> ID INCREMENT .)
    RBRACKET        reduce using rule 76 (increment_rule -> ID INCREMENT .)


state 54

    (77) increment_rule -> ID DECREMENT .

    BREAK           reduce using rule 77 (increment_rule -> ID DECREMENT .)
    RETURN          reduce using rule 77 (increment_rule -> ID DECREMENT .)
    ID              reduce using rule 77 (increment_rule -> ID DECREMENT .)
    MUT             reduce using rule 77 (increment_rule -> ID DECREMENT .)
    IF              reduce using rule 77 (increment_rule -> ID DECREMENT .)
    FOR             reduce using rule 77 (increment_rule -> ID DECREMENT .)
    RBRACE          reduce using rule 77 (increment_rule -> ID DECREMENT .)
    PLUS            reduce using rule 77 (increment_rule -> ID DECREMENT .)
    MINUS           reduce using rule 77 (increment_rule -> ID DECREMENT .)
    CONST           reduce using rule 77 (increment_rule -> ID DECREMENT .)
    FN              reduce using rule 77 (increment_rule -> ID DECREMENT .)
    $end            reduce using rule 77 (increment_rule -> ID DECREMENT .)
    EQ              reduce using rule 77 (increment_rule -> ID DECREMENT .)
    NEQ             reduce using rule 77 (increment_rule -> ID DECREMENT .)
    LT              reduce using rule 77 (increment_rule -> ID DECREMENT .)
    LE              reduce using rule 77 (increment_rule -> ID DECREMENT .)
    GT              reduce using rule 77 (increment_rule -> ID DECREMENT .)
    GE              reduce using rule 77 (increment_rule -> ID DECREMENT .)
    AND             reduce using rule 77 (increment_rule -> ID DECREMENT .)
    OR              reduce using rule 77 (increment_rule -> ID DECREMENT .)
    COMMA           reduce using rule 77 (increment_rule -> ID DECREMENT .)
    RPAREN          reduce using rule 77 (increment_rule -> ID DECREMENT .)
    LBRACE          reduce using rule 77 (increment_rule -> ID DECREMENT .)
    SEMICOLON       reduce using rule 77 (increment_rule -> ID DECREMENT .)
    RBRACKET        reduce using rule 77 (increment_rule -> ID DECREMENT .)


state 55

    (87) assignment -> ID PLUS_ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 84
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 56

    (88) assignment -> ID MINUS_ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 85
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 57

    (89) assignment -> ID TIMES_ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 86
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 58

    (90) assignment -> ID DIVIDE_ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 87
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 59

    (91) assignment -> ID MOD_ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 88
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 60

    (92) assignment -> ID BIT_AND_ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 89
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 61

    (93) assignment -> ID BIT_OR_ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 90
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 62

    (94) assignment -> ID BIT_XOR_ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 91
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 63

    (95) assignment -> ID BIT_LSHIFT_ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 92
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 64

    (96) assignment -> ID BIT_RSHIFT_ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 93
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 65

    (34) var_statement -> MUT ID . DECLARE_ASSIGN expression
    (37) list_statement -> MUT ID . DECLARE_ASSIGN LBRACKET params RBRACKET
    (38) list_statement -> MUT ID . DECLARE_ASSIGN LBRACKET params RBRACKET ID

    DECLARE_ASSIGN  shift and go to state 94


state 66

    (44) if_statement -> IF expression_relacional . block_statement
    (45) if_statement -> IF expression_relacional . block_statement elseop
    (18) block_statement -> . LBRACE statements RBRACE
    (19) block_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 17

    block_statement                shift and go to state 95

state 67

    (78) expression_relacional -> expression . EQ expression
    (79) expression_relacional -> expression . NEQ expression
    (80) expression_relacional -> expression . LT expression
    (81) expression_relacional -> expression . LE expression
    (82) expression_relacional -> expression . GT expression
    (83) expression_relacional -> expression . GE expression
    (84) expression_relacional -> expression . AND expression
    (85) expression_relacional -> expression . OR expression
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    EQ              shift and go to state 96
    NEQ             shift and go to state 97
    LT              shift and go to state 98
    LE              shift and go to state 99
    GT              shift and go to state 100
    GE              shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 68

    (86) expression_relacional -> NOT . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 104
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 69

    (48) for_statement -> FOR ID . IN expression block_statement
    (49) for_statement -> FOR ID . SEMICOLON expression_relacional SEMICOLON increment_rule block_statement
    (76) increment_rule -> ID . INCREMENT
    (77) increment_rule -> ID . DECREMENT
    (42) func_call -> ID . LPAREN params RPAREN
    (43) func_call -> ID . LPAREN RPAREN
    (40) list_call -> ID . LBRACKET DOTDOT RBRACKET
    (41) list_call -> ID . LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    IN              shift and go to state 105
    SEMICOLON       shift and go to state 106
    INCREMENT       shift and go to state 53
    DECREMENT       shift and go to state 54
    LPAREN          shift and go to state 52
    LBRACKET        shift and go to state 74


state 70

    (50) for_statement -> FOR expression_relacional . block_statement
    (18) block_statement -> . LBRACE statements RBRACE
    (19) block_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 17

    block_statement                shift and go to state 107

state 71

    (14) sigparams -> ID . ID
    (15) sigparams -> ID . ID COMMA sigparams

    ID              shift and go to state 108


state 72

    (12) signature -> FN ID LPAREN sigparams . RPAREN

    RPAREN          shift and go to state 109


state 73

    (13) signature -> FN ID LPAREN RPAREN .

    ID              reduce using rule 13 (signature -> FN ID LPAREN RPAREN .)
    LBRACE          reduce using rule 13 (signature -> FN ID LPAREN RPAREN .)


state 74

    (40) list_call -> ID LBRACKET . DOTDOT RBRACKET
    (41) list_call -> ID LBRACKET . NUMBER DOTDOT NUMBER RBRACKET

    DOTDOT          shift and go to state 110
    NUMBER          shift and go to state 111


state 75

    (51) expression -> expression PLUS . term
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . term MOD factor
    (59) term -> . factor
    (60) factor -> . ID
    (61) factor -> . NUMBER
    (62) factor -> . NUMBERFLOAT
    (63) factor -> . WORD
    (64) factor -> . TRUE
    (65) factor -> . FALSE
    (66) factor -> . RUNEVALOR
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . ID LBRACKET NUMBER RBRACKET
    (69) factor -> . NOTACAOCIENTIFICA
    (70) factor -> . BINARY
    (71) factor -> . OCTAL
    (72) factor -> . HEX
    (73) factor -> . size_of_expression
    (74) size_of_expression -> . SIZEOF LPAREN expression RPAREN
    (75) size_of_expression -> . SIZEOF LPAREN ID RPAREN

    ID              shift and go to state 114
    NUMBER          shift and go to state 115
    NUMBERFLOAT     shift and go to state 116
    WORD            shift and go to state 117
    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    RUNEVALOR       shift and go to state 120
    LPAREN          shift and go to state 121
    NOTACAOCIENTIFICA shift and go to state 122
    BINARY          shift and go to state 123
    OCTAL           shift and go to state 124
    HEX             shift and go to state 125
    SIZEOF          shift and go to state 127

    term                           shift and go to state 112
    factor                         shift and go to state 113
    size_of_expression             shift and go to state 126

state 76

    (52) expression -> expression MINUS . term
    (56) term -> . term TIMES factor
    (57) term -> . term DIVIDE factor
    (58) term -> . term MOD factor
    (59) term -> . factor
    (60) factor -> . ID
    (61) factor -> . NUMBER
    (62) factor -> . NUMBERFLOAT
    (63) factor -> . WORD
    (64) factor -> . TRUE
    (65) factor -> . FALSE
    (66) factor -> . RUNEVALOR
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . ID LBRACKET NUMBER RBRACKET
    (69) factor -> . NOTACAOCIENTIFICA
    (70) factor -> . BINARY
    (71) factor -> . OCTAL
    (72) factor -> . HEX
    (73) factor -> . size_of_expression
    (74) size_of_expression -> . SIZEOF LPAREN expression RPAREN
    (75) size_of_expression -> . SIZEOF LPAREN ID RPAREN

    ID              shift and go to state 114
    NUMBER          shift and go to state 115
    NUMBERFLOAT     shift and go to state 116
    WORD            shift and go to state 117
    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    RUNEVALOR       shift and go to state 120
    LPAREN          shift and go to state 121
    NOTACAOCIENTIFICA shift and go to state 122
    BINARY          shift and go to state 123
    OCTAL           shift and go to state 124
    HEX             shift and go to state 125
    SIZEOF          shift and go to state 127

    term                           shift and go to state 128
    factor                         shift and go to state 113
    size_of_expression             shift and go to state 126

state 77

    (33) var_statement -> ID DECLARE_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 33 (var_statement -> ID DECLARE_ASSIGN expression .)
    RETURN          reduce using rule 33 (var_statement -> ID DECLARE_ASSIGN expression .)
    ID              reduce using rule 33 (var_statement -> ID DECLARE_ASSIGN expression .)
    MUT             reduce using rule 33 (var_statement -> ID DECLARE_ASSIGN expression .)
    IF              reduce using rule 33 (var_statement -> ID DECLARE_ASSIGN expression .)
    FOR             reduce using rule 33 (var_statement -> ID DECLARE_ASSIGN expression .)
    RBRACE          reduce using rule 33 (var_statement -> ID DECLARE_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 78

    (36) list_statement -> ID DECLARE_ASSIGN LBRACKET . params RBRACKET
    (16) params -> . expression COMMA params
    (17) params -> . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    params                         shift and go to state 129
    expression                     shift and go to state 83
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 79

    (35) var_assignment -> ID ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 35 (var_assignment -> ID ASSIGN expression .)
    RETURN          reduce using rule 35 (var_assignment -> ID ASSIGN expression .)
    ID              reduce using rule 35 (var_assignment -> ID ASSIGN expression .)
    MUT             reduce using rule 35 (var_assignment -> ID ASSIGN expression .)
    IF              reduce using rule 35 (var_assignment -> ID ASSIGN expression .)
    FOR             reduce using rule 35 (var_assignment -> ID ASSIGN expression .)
    RBRACE          reduce using rule 35 (var_assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 80

    (39) list_assignment -> ID LBRACKET NUMBER . RBRACKET ASSIGN expression

    RBRACKET        shift and go to state 130


state 81

    (42) func_call -> ID LPAREN params . RPAREN

    RPAREN          shift and go to state 131


state 82

    (43) func_call -> ID LPAREN RPAREN .

    BREAK           reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    ID              reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    MUT             reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    IF              reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    FOR             reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    CONST           reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    FN              reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    $end            reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    EQ              reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    NEQ             reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    LT              reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    LE              reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    GT              reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    GE              reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    LBRACE          reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 43 (func_call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 43 (func_call -> ID LPAREN RPAREN .)


state 83

    (16) params -> expression . COMMA params
    (17) params -> expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    COMMA           shift and go to state 132
    RPAREN          reduce using rule 17 (params -> expression .)
    RBRACKET        reduce using rule 17 (params -> expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 84

    (87) assignment -> ID PLUS_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 87 (assignment -> ID PLUS_ASSIGN expression .)
    RETURN          reduce using rule 87 (assignment -> ID PLUS_ASSIGN expression .)
    ID              reduce using rule 87 (assignment -> ID PLUS_ASSIGN expression .)
    MUT             reduce using rule 87 (assignment -> ID PLUS_ASSIGN expression .)
    IF              reduce using rule 87 (assignment -> ID PLUS_ASSIGN expression .)
    FOR             reduce using rule 87 (assignment -> ID PLUS_ASSIGN expression .)
    RBRACE          reduce using rule 87 (assignment -> ID PLUS_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 85

    (88) assignment -> ID MINUS_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 88 (assignment -> ID MINUS_ASSIGN expression .)
    RETURN          reduce using rule 88 (assignment -> ID MINUS_ASSIGN expression .)
    ID              reduce using rule 88 (assignment -> ID MINUS_ASSIGN expression .)
    MUT             reduce using rule 88 (assignment -> ID MINUS_ASSIGN expression .)
    IF              reduce using rule 88 (assignment -> ID MINUS_ASSIGN expression .)
    FOR             reduce using rule 88 (assignment -> ID MINUS_ASSIGN expression .)
    RBRACE          reduce using rule 88 (assignment -> ID MINUS_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 86

    (89) assignment -> ID TIMES_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 89 (assignment -> ID TIMES_ASSIGN expression .)
    RETURN          reduce using rule 89 (assignment -> ID TIMES_ASSIGN expression .)
    ID              reduce using rule 89 (assignment -> ID TIMES_ASSIGN expression .)
    MUT             reduce using rule 89 (assignment -> ID TIMES_ASSIGN expression .)
    IF              reduce using rule 89 (assignment -> ID TIMES_ASSIGN expression .)
    FOR             reduce using rule 89 (assignment -> ID TIMES_ASSIGN expression .)
    RBRACE          reduce using rule 89 (assignment -> ID TIMES_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 87

    (90) assignment -> ID DIVIDE_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 90 (assignment -> ID DIVIDE_ASSIGN expression .)
    RETURN          reduce using rule 90 (assignment -> ID DIVIDE_ASSIGN expression .)
    ID              reduce using rule 90 (assignment -> ID DIVIDE_ASSIGN expression .)
    MUT             reduce using rule 90 (assignment -> ID DIVIDE_ASSIGN expression .)
    IF              reduce using rule 90 (assignment -> ID DIVIDE_ASSIGN expression .)
    FOR             reduce using rule 90 (assignment -> ID DIVIDE_ASSIGN expression .)
    RBRACE          reduce using rule 90 (assignment -> ID DIVIDE_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 88

    (91) assignment -> ID MOD_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 91 (assignment -> ID MOD_ASSIGN expression .)
    RETURN          reduce using rule 91 (assignment -> ID MOD_ASSIGN expression .)
    ID              reduce using rule 91 (assignment -> ID MOD_ASSIGN expression .)
    MUT             reduce using rule 91 (assignment -> ID MOD_ASSIGN expression .)
    IF              reduce using rule 91 (assignment -> ID MOD_ASSIGN expression .)
    FOR             reduce using rule 91 (assignment -> ID MOD_ASSIGN expression .)
    RBRACE          reduce using rule 91 (assignment -> ID MOD_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 89

    (92) assignment -> ID BIT_AND_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 92 (assignment -> ID BIT_AND_ASSIGN expression .)
    RETURN          reduce using rule 92 (assignment -> ID BIT_AND_ASSIGN expression .)
    ID              reduce using rule 92 (assignment -> ID BIT_AND_ASSIGN expression .)
    MUT             reduce using rule 92 (assignment -> ID BIT_AND_ASSIGN expression .)
    IF              reduce using rule 92 (assignment -> ID BIT_AND_ASSIGN expression .)
    FOR             reduce using rule 92 (assignment -> ID BIT_AND_ASSIGN expression .)
    RBRACE          reduce using rule 92 (assignment -> ID BIT_AND_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 90

    (93) assignment -> ID BIT_OR_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 93 (assignment -> ID BIT_OR_ASSIGN expression .)
    RETURN          reduce using rule 93 (assignment -> ID BIT_OR_ASSIGN expression .)
    ID              reduce using rule 93 (assignment -> ID BIT_OR_ASSIGN expression .)
    MUT             reduce using rule 93 (assignment -> ID BIT_OR_ASSIGN expression .)
    IF              reduce using rule 93 (assignment -> ID BIT_OR_ASSIGN expression .)
    FOR             reduce using rule 93 (assignment -> ID BIT_OR_ASSIGN expression .)
    RBRACE          reduce using rule 93 (assignment -> ID BIT_OR_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 91

    (94) assignment -> ID BIT_XOR_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 94 (assignment -> ID BIT_XOR_ASSIGN expression .)
    RETURN          reduce using rule 94 (assignment -> ID BIT_XOR_ASSIGN expression .)
    ID              reduce using rule 94 (assignment -> ID BIT_XOR_ASSIGN expression .)
    MUT             reduce using rule 94 (assignment -> ID BIT_XOR_ASSIGN expression .)
    IF              reduce using rule 94 (assignment -> ID BIT_XOR_ASSIGN expression .)
    FOR             reduce using rule 94 (assignment -> ID BIT_XOR_ASSIGN expression .)
    RBRACE          reduce using rule 94 (assignment -> ID BIT_XOR_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 92

    (95) assignment -> ID BIT_LSHIFT_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 95 (assignment -> ID BIT_LSHIFT_ASSIGN expression .)
    RETURN          reduce using rule 95 (assignment -> ID BIT_LSHIFT_ASSIGN expression .)
    ID              reduce using rule 95 (assignment -> ID BIT_LSHIFT_ASSIGN expression .)
    MUT             reduce using rule 95 (assignment -> ID BIT_LSHIFT_ASSIGN expression .)
    IF              reduce using rule 95 (assignment -> ID BIT_LSHIFT_ASSIGN expression .)
    FOR             reduce using rule 95 (assignment -> ID BIT_LSHIFT_ASSIGN expression .)
    RBRACE          reduce using rule 95 (assignment -> ID BIT_LSHIFT_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 93

    (96) assignment -> ID BIT_RSHIFT_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 96 (assignment -> ID BIT_RSHIFT_ASSIGN expression .)
    RETURN          reduce using rule 96 (assignment -> ID BIT_RSHIFT_ASSIGN expression .)
    ID              reduce using rule 96 (assignment -> ID BIT_RSHIFT_ASSIGN expression .)
    MUT             reduce using rule 96 (assignment -> ID BIT_RSHIFT_ASSIGN expression .)
    IF              reduce using rule 96 (assignment -> ID BIT_RSHIFT_ASSIGN expression .)
    FOR             reduce using rule 96 (assignment -> ID BIT_RSHIFT_ASSIGN expression .)
    RBRACE          reduce using rule 96 (assignment -> ID BIT_RSHIFT_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 94

    (34) var_statement -> MUT ID DECLARE_ASSIGN . expression
    (37) list_statement -> MUT ID DECLARE_ASSIGN . LBRACKET params RBRACKET
    (38) list_statement -> MUT ID DECLARE_ASSIGN . LBRACKET params RBRACKET ID
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    LBRACKET        shift and go to state 134
    ID              shift and go to state 41

    expression                     shift and go to state 133
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 95

    (44) if_statement -> IF expression_relacional block_statement .
    (45) if_statement -> IF expression_relacional block_statement . elseop
    (46) elseop -> . ELSE if_statement
    (47) elseop -> . ELSE block_statement

    BREAK           reduce using rule 44 (if_statement -> IF expression_relacional block_statement .)
    RETURN          reduce using rule 44 (if_statement -> IF expression_relacional block_statement .)
    ID              reduce using rule 44 (if_statement -> IF expression_relacional block_statement .)
    MUT             reduce using rule 44 (if_statement -> IF expression_relacional block_statement .)
    IF              reduce using rule 44 (if_statement -> IF expression_relacional block_statement .)
    FOR             reduce using rule 44 (if_statement -> IF expression_relacional block_statement .)
    RBRACE          reduce using rule 44 (if_statement -> IF expression_relacional block_statement .)
    ELSE            shift and go to state 136

    elseop                         shift and go to state 135

state 96

    (78) expression_relacional -> expression EQ . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 137
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 97

    (79) expression_relacional -> expression NEQ . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 138
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 98

    (80) expression_relacional -> expression LT . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 139
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 99

    (81) expression_relacional -> expression LE . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 140
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 100

    (82) expression_relacional -> expression GT . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 141
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 101

    (83) expression_relacional -> expression GE . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 142
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 102

    (84) expression_relacional -> expression AND . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 143
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 103

    (85) expression_relacional -> expression OR . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 144
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 104

    (86) expression_relacional -> NOT expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    LBRACE          reduce using rule 86 (expression_relacional -> NOT expression .)
    SEMICOLON       reduce using rule 86 (expression_relacional -> NOT expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 105

    (48) for_statement -> FOR ID IN . expression block_statement
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 145
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 106

    (49) for_statement -> FOR ID SEMICOLON . expression_relacional SEMICOLON increment_rule block_statement
    (78) expression_relacional -> . expression EQ expression
    (79) expression_relacional -> . expression NEQ expression
    (80) expression_relacional -> . expression LT expression
    (81) expression_relacional -> . expression LE expression
    (82) expression_relacional -> . expression GT expression
    (83) expression_relacional -> . expression GE expression
    (84) expression_relacional -> . expression AND expression
    (85) expression_relacional -> . expression OR expression
    (86) expression_relacional -> . NOT expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    NOT             shift and go to state 68
    ID              shift and go to state 41

    expression_relacional          shift and go to state 146
    increment_rule                 shift and go to state 43
    expression                     shift and go to state 67
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 107

    (50) for_statement -> FOR expression_relacional block_statement .

    BREAK           reduce using rule 50 (for_statement -> FOR expression_relacional block_statement .)
    RETURN          reduce using rule 50 (for_statement -> FOR expression_relacional block_statement .)
    ID              reduce using rule 50 (for_statement -> FOR expression_relacional block_statement .)
    MUT             reduce using rule 50 (for_statement -> FOR expression_relacional block_statement .)
    IF              reduce using rule 50 (for_statement -> FOR expression_relacional block_statement .)
    FOR             reduce using rule 50 (for_statement -> FOR expression_relacional block_statement .)
    RBRACE          reduce using rule 50 (for_statement -> FOR expression_relacional block_statement .)


state 108

    (14) sigparams -> ID ID .
    (15) sigparams -> ID ID . COMMA sigparams

    RPAREN          reduce using rule 14 (sigparams -> ID ID .)
    COMMA           shift and go to state 147


state 109

    (12) signature -> FN ID LPAREN sigparams RPAREN .

    ID              reduce using rule 12 (signature -> FN ID LPAREN sigparams RPAREN .)
    LBRACE          reduce using rule 12 (signature -> FN ID LPAREN sigparams RPAREN .)


state 110

    (40) list_call -> ID LBRACKET DOTDOT . RBRACKET

    RBRACKET        shift and go to state 148


state 111

    (41) list_call -> ID LBRACKET NUMBER . DOTDOT NUMBER RBRACKET

    DOTDOT          shift and go to state 149


state 112

    (51) expression -> expression PLUS term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor
    (58) term -> term . MOD factor

    PLUS            reduce using rule 51 (expression -> expression PLUS term .)
    MINUS           reduce using rule 51 (expression -> expression PLUS term .)
    CONST           reduce using rule 51 (expression -> expression PLUS term .)
    FN              reduce using rule 51 (expression -> expression PLUS term .)
    $end            reduce using rule 51 (expression -> expression PLUS term .)
    BREAK           reduce using rule 51 (expression -> expression PLUS term .)
    RETURN          reduce using rule 51 (expression -> expression PLUS term .)
    ID              reduce using rule 51 (expression -> expression PLUS term .)
    MUT             reduce using rule 51 (expression -> expression PLUS term .)
    IF              reduce using rule 51 (expression -> expression PLUS term .)
    FOR             reduce using rule 51 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 51 (expression -> expression PLUS term .)
    EQ              reduce using rule 51 (expression -> expression PLUS term .)
    NEQ             reduce using rule 51 (expression -> expression PLUS term .)
    LT              reduce using rule 51 (expression -> expression PLUS term .)
    LE              reduce using rule 51 (expression -> expression PLUS term .)
    GT              reduce using rule 51 (expression -> expression PLUS term .)
    GE              reduce using rule 51 (expression -> expression PLUS term .)
    AND             reduce using rule 51 (expression -> expression PLUS term .)
    OR              reduce using rule 51 (expression -> expression PLUS term .)
    COMMA           reduce using rule 51 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 51 (expression -> expression PLUS term .)
    LBRACE          reduce using rule 51 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 51 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 51 (expression -> expression PLUS term .)
    TIMES           shift and go to state 150
    DIVIDE          shift and go to state 151
    MOD             shift and go to state 152


state 113

    (59) term -> factor .

    TIMES           reduce using rule 59 (term -> factor .)
    DIVIDE          reduce using rule 59 (term -> factor .)
    MOD             reduce using rule 59 (term -> factor .)
    PLUS            reduce using rule 59 (term -> factor .)
    MINUS           reduce using rule 59 (term -> factor .)
    CONST           reduce using rule 59 (term -> factor .)
    FN              reduce using rule 59 (term -> factor .)
    $end            reduce using rule 59 (term -> factor .)
    BREAK           reduce using rule 59 (term -> factor .)
    RETURN          reduce using rule 59 (term -> factor .)
    ID              reduce using rule 59 (term -> factor .)
    MUT             reduce using rule 59 (term -> factor .)
    IF              reduce using rule 59 (term -> factor .)
    FOR             reduce using rule 59 (term -> factor .)
    RBRACE          reduce using rule 59 (term -> factor .)
    EQ              reduce using rule 59 (term -> factor .)
    NEQ             reduce using rule 59 (term -> factor .)
    LT              reduce using rule 59 (term -> factor .)
    LE              reduce using rule 59 (term -> factor .)
    GT              reduce using rule 59 (term -> factor .)
    GE              reduce using rule 59 (term -> factor .)
    AND             reduce using rule 59 (term -> factor .)
    OR              reduce using rule 59 (term -> factor .)
    COMMA           reduce using rule 59 (term -> factor .)
    RPAREN          reduce using rule 59 (term -> factor .)
    LBRACE          reduce using rule 59 (term -> factor .)
    SEMICOLON       reduce using rule 59 (term -> factor .)
    RBRACKET        reduce using rule 59 (term -> factor .)


state 114

    (60) factor -> ID .
    (68) factor -> ID . LBRACKET NUMBER RBRACKET

    TIMES           reduce using rule 60 (factor -> ID .)
    DIVIDE          reduce using rule 60 (factor -> ID .)
    MOD             reduce using rule 60 (factor -> ID .)
    PLUS            reduce using rule 60 (factor -> ID .)
    MINUS           reduce using rule 60 (factor -> ID .)
    CONST           reduce using rule 60 (factor -> ID .)
    FN              reduce using rule 60 (factor -> ID .)
    $end            reduce using rule 60 (factor -> ID .)
    BREAK           reduce using rule 60 (factor -> ID .)
    RETURN          reduce using rule 60 (factor -> ID .)
    ID              reduce using rule 60 (factor -> ID .)
    MUT             reduce using rule 60 (factor -> ID .)
    IF              reduce using rule 60 (factor -> ID .)
    FOR             reduce using rule 60 (factor -> ID .)
    RBRACE          reduce using rule 60 (factor -> ID .)
    EQ              reduce using rule 60 (factor -> ID .)
    NEQ             reduce using rule 60 (factor -> ID .)
    LT              reduce using rule 60 (factor -> ID .)
    LE              reduce using rule 60 (factor -> ID .)
    GT              reduce using rule 60 (factor -> ID .)
    GE              reduce using rule 60 (factor -> ID .)
    AND             reduce using rule 60 (factor -> ID .)
    OR              reduce using rule 60 (factor -> ID .)
    COMMA           reduce using rule 60 (factor -> ID .)
    RPAREN          reduce using rule 60 (factor -> ID .)
    LBRACE          reduce using rule 60 (factor -> ID .)
    SEMICOLON       reduce using rule 60 (factor -> ID .)
    RBRACKET        reduce using rule 60 (factor -> ID .)
    LBRACKET        shift and go to state 153


state 115

    (61) factor -> NUMBER .

    TIMES           reduce using rule 61 (factor -> NUMBER .)
    DIVIDE          reduce using rule 61 (factor -> NUMBER .)
    MOD             reduce using rule 61 (factor -> NUMBER .)
    PLUS            reduce using rule 61 (factor -> NUMBER .)
    MINUS           reduce using rule 61 (factor -> NUMBER .)
    CONST           reduce using rule 61 (factor -> NUMBER .)
    FN              reduce using rule 61 (factor -> NUMBER .)
    $end            reduce using rule 61 (factor -> NUMBER .)
    BREAK           reduce using rule 61 (factor -> NUMBER .)
    RETURN          reduce using rule 61 (factor -> NUMBER .)
    ID              reduce using rule 61 (factor -> NUMBER .)
    MUT             reduce using rule 61 (factor -> NUMBER .)
    IF              reduce using rule 61 (factor -> NUMBER .)
    FOR             reduce using rule 61 (factor -> NUMBER .)
    RBRACE          reduce using rule 61 (factor -> NUMBER .)
    EQ              reduce using rule 61 (factor -> NUMBER .)
    NEQ             reduce using rule 61 (factor -> NUMBER .)
    LT              reduce using rule 61 (factor -> NUMBER .)
    LE              reduce using rule 61 (factor -> NUMBER .)
    GT              reduce using rule 61 (factor -> NUMBER .)
    GE              reduce using rule 61 (factor -> NUMBER .)
    AND             reduce using rule 61 (factor -> NUMBER .)
    OR              reduce using rule 61 (factor -> NUMBER .)
    COMMA           reduce using rule 61 (factor -> NUMBER .)
    RPAREN          reduce using rule 61 (factor -> NUMBER .)
    LBRACE          reduce using rule 61 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 61 (factor -> NUMBER .)
    RBRACKET        reduce using rule 61 (factor -> NUMBER .)


state 116

    (62) factor -> NUMBERFLOAT .

    TIMES           reduce using rule 62 (factor -> NUMBERFLOAT .)
    DIVIDE          reduce using rule 62 (factor -> NUMBERFLOAT .)
    MOD             reduce using rule 62 (factor -> NUMBERFLOAT .)
    PLUS            reduce using rule 62 (factor -> NUMBERFLOAT .)
    MINUS           reduce using rule 62 (factor -> NUMBERFLOAT .)
    CONST           reduce using rule 62 (factor -> NUMBERFLOAT .)
    FN              reduce using rule 62 (factor -> NUMBERFLOAT .)
    $end            reduce using rule 62 (factor -> NUMBERFLOAT .)
    BREAK           reduce using rule 62 (factor -> NUMBERFLOAT .)
    RETURN          reduce using rule 62 (factor -> NUMBERFLOAT .)
    ID              reduce using rule 62 (factor -> NUMBERFLOAT .)
    MUT             reduce using rule 62 (factor -> NUMBERFLOAT .)
    IF              reduce using rule 62 (factor -> NUMBERFLOAT .)
    FOR             reduce using rule 62 (factor -> NUMBERFLOAT .)
    RBRACE          reduce using rule 62 (factor -> NUMBERFLOAT .)
    EQ              reduce using rule 62 (factor -> NUMBERFLOAT .)
    NEQ             reduce using rule 62 (factor -> NUMBERFLOAT .)
    LT              reduce using rule 62 (factor -> NUMBERFLOAT .)
    LE              reduce using rule 62 (factor -> NUMBERFLOAT .)
    GT              reduce using rule 62 (factor -> NUMBERFLOAT .)
    GE              reduce using rule 62 (factor -> NUMBERFLOAT .)
    AND             reduce using rule 62 (factor -> NUMBERFLOAT .)
    OR              reduce using rule 62 (factor -> NUMBERFLOAT .)
    COMMA           reduce using rule 62 (factor -> NUMBERFLOAT .)
    RPAREN          reduce using rule 62 (factor -> NUMBERFLOAT .)
    LBRACE          reduce using rule 62 (factor -> NUMBERFLOAT .)
    SEMICOLON       reduce using rule 62 (factor -> NUMBERFLOAT .)
    RBRACKET        reduce using rule 62 (factor -> NUMBERFLOAT .)


state 117

    (63) factor -> WORD .

    TIMES           reduce using rule 63 (factor -> WORD .)
    DIVIDE          reduce using rule 63 (factor -> WORD .)
    MOD             reduce using rule 63 (factor -> WORD .)
    PLUS            reduce using rule 63 (factor -> WORD .)
    MINUS           reduce using rule 63 (factor -> WORD .)
    CONST           reduce using rule 63 (factor -> WORD .)
    FN              reduce using rule 63 (factor -> WORD .)
    $end            reduce using rule 63 (factor -> WORD .)
    BREAK           reduce using rule 63 (factor -> WORD .)
    RETURN          reduce using rule 63 (factor -> WORD .)
    ID              reduce using rule 63 (factor -> WORD .)
    MUT             reduce using rule 63 (factor -> WORD .)
    IF              reduce using rule 63 (factor -> WORD .)
    FOR             reduce using rule 63 (factor -> WORD .)
    RBRACE          reduce using rule 63 (factor -> WORD .)
    EQ              reduce using rule 63 (factor -> WORD .)
    NEQ             reduce using rule 63 (factor -> WORD .)
    LT              reduce using rule 63 (factor -> WORD .)
    LE              reduce using rule 63 (factor -> WORD .)
    GT              reduce using rule 63 (factor -> WORD .)
    GE              reduce using rule 63 (factor -> WORD .)
    AND             reduce using rule 63 (factor -> WORD .)
    OR              reduce using rule 63 (factor -> WORD .)
    COMMA           reduce using rule 63 (factor -> WORD .)
    RPAREN          reduce using rule 63 (factor -> WORD .)
    LBRACE          reduce using rule 63 (factor -> WORD .)
    SEMICOLON       reduce using rule 63 (factor -> WORD .)
    RBRACKET        reduce using rule 63 (factor -> WORD .)


state 118

    (64) factor -> TRUE .

    TIMES           reduce using rule 64 (factor -> TRUE .)
    DIVIDE          reduce using rule 64 (factor -> TRUE .)
    MOD             reduce using rule 64 (factor -> TRUE .)
    PLUS            reduce using rule 64 (factor -> TRUE .)
    MINUS           reduce using rule 64 (factor -> TRUE .)
    CONST           reduce using rule 64 (factor -> TRUE .)
    FN              reduce using rule 64 (factor -> TRUE .)
    $end            reduce using rule 64 (factor -> TRUE .)
    BREAK           reduce using rule 64 (factor -> TRUE .)
    RETURN          reduce using rule 64 (factor -> TRUE .)
    ID              reduce using rule 64 (factor -> TRUE .)
    MUT             reduce using rule 64 (factor -> TRUE .)
    IF              reduce using rule 64 (factor -> TRUE .)
    FOR             reduce using rule 64 (factor -> TRUE .)
    RBRACE          reduce using rule 64 (factor -> TRUE .)
    EQ              reduce using rule 64 (factor -> TRUE .)
    NEQ             reduce using rule 64 (factor -> TRUE .)
    LT              reduce using rule 64 (factor -> TRUE .)
    LE              reduce using rule 64 (factor -> TRUE .)
    GT              reduce using rule 64 (factor -> TRUE .)
    GE              reduce using rule 64 (factor -> TRUE .)
    AND             reduce using rule 64 (factor -> TRUE .)
    OR              reduce using rule 64 (factor -> TRUE .)
    COMMA           reduce using rule 64 (factor -> TRUE .)
    RPAREN          reduce using rule 64 (factor -> TRUE .)
    LBRACE          reduce using rule 64 (factor -> TRUE .)
    SEMICOLON       reduce using rule 64 (factor -> TRUE .)
    RBRACKET        reduce using rule 64 (factor -> TRUE .)


state 119

    (65) factor -> FALSE .

    TIMES           reduce using rule 65 (factor -> FALSE .)
    DIVIDE          reduce using rule 65 (factor -> FALSE .)
    MOD             reduce using rule 65 (factor -> FALSE .)
    PLUS            reduce using rule 65 (factor -> FALSE .)
    MINUS           reduce using rule 65 (factor -> FALSE .)
    CONST           reduce using rule 65 (factor -> FALSE .)
    FN              reduce using rule 65 (factor -> FALSE .)
    $end            reduce using rule 65 (factor -> FALSE .)
    BREAK           reduce using rule 65 (factor -> FALSE .)
    RETURN          reduce using rule 65 (factor -> FALSE .)
    ID              reduce using rule 65 (factor -> FALSE .)
    MUT             reduce using rule 65 (factor -> FALSE .)
    IF              reduce using rule 65 (factor -> FALSE .)
    FOR             reduce using rule 65 (factor -> FALSE .)
    RBRACE          reduce using rule 65 (factor -> FALSE .)
    EQ              reduce using rule 65 (factor -> FALSE .)
    NEQ             reduce using rule 65 (factor -> FALSE .)
    LT              reduce using rule 65 (factor -> FALSE .)
    LE              reduce using rule 65 (factor -> FALSE .)
    GT              reduce using rule 65 (factor -> FALSE .)
    GE              reduce using rule 65 (factor -> FALSE .)
    AND             reduce using rule 65 (factor -> FALSE .)
    OR              reduce using rule 65 (factor -> FALSE .)
    COMMA           reduce using rule 65 (factor -> FALSE .)
    RPAREN          reduce using rule 65 (factor -> FALSE .)
    LBRACE          reduce using rule 65 (factor -> FALSE .)
    SEMICOLON       reduce using rule 65 (factor -> FALSE .)
    RBRACKET        reduce using rule 65 (factor -> FALSE .)


state 120

    (66) factor -> RUNEVALOR .

    TIMES           reduce using rule 66 (factor -> RUNEVALOR .)
    DIVIDE          reduce using rule 66 (factor -> RUNEVALOR .)
    MOD             reduce using rule 66 (factor -> RUNEVALOR .)
    PLUS            reduce using rule 66 (factor -> RUNEVALOR .)
    MINUS           reduce using rule 66 (factor -> RUNEVALOR .)
    CONST           reduce using rule 66 (factor -> RUNEVALOR .)
    FN              reduce using rule 66 (factor -> RUNEVALOR .)
    $end            reduce using rule 66 (factor -> RUNEVALOR .)
    BREAK           reduce using rule 66 (factor -> RUNEVALOR .)
    RETURN          reduce using rule 66 (factor -> RUNEVALOR .)
    ID              reduce using rule 66 (factor -> RUNEVALOR .)
    MUT             reduce using rule 66 (factor -> RUNEVALOR .)
    IF              reduce using rule 66 (factor -> RUNEVALOR .)
    FOR             reduce using rule 66 (factor -> RUNEVALOR .)
    RBRACE          reduce using rule 66 (factor -> RUNEVALOR .)
    EQ              reduce using rule 66 (factor -> RUNEVALOR .)
    NEQ             reduce using rule 66 (factor -> RUNEVALOR .)
    LT              reduce using rule 66 (factor -> RUNEVALOR .)
    LE              reduce using rule 66 (factor -> RUNEVALOR .)
    GT              reduce using rule 66 (factor -> RUNEVALOR .)
    GE              reduce using rule 66 (factor -> RUNEVALOR .)
    AND             reduce using rule 66 (factor -> RUNEVALOR .)
    OR              reduce using rule 66 (factor -> RUNEVALOR .)
    COMMA           reduce using rule 66 (factor -> RUNEVALOR .)
    RPAREN          reduce using rule 66 (factor -> RUNEVALOR .)
    LBRACE          reduce using rule 66 (factor -> RUNEVALOR .)
    SEMICOLON       reduce using rule 66 (factor -> RUNEVALOR .)
    RBRACKET        reduce using rule 66 (factor -> RUNEVALOR .)


state 121

    (67) factor -> LPAREN . expression RPAREN
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 154
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 122

    (69) factor -> NOTACAOCIENTIFICA .

    TIMES           reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    DIVIDE          reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    MOD             reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    PLUS            reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    MINUS           reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    CONST           reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    FN              reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    $end            reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    BREAK           reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    RETURN          reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    ID              reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    MUT             reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    IF              reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    FOR             reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    RBRACE          reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    EQ              reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    NEQ             reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    LT              reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    LE              reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    GT              reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    GE              reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    AND             reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    OR              reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    COMMA           reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    RPAREN          reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    LBRACE          reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    SEMICOLON       reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)
    RBRACKET        reduce using rule 69 (factor -> NOTACAOCIENTIFICA .)


state 123

    (70) factor -> BINARY .

    TIMES           reduce using rule 70 (factor -> BINARY .)
    DIVIDE          reduce using rule 70 (factor -> BINARY .)
    MOD             reduce using rule 70 (factor -> BINARY .)
    PLUS            reduce using rule 70 (factor -> BINARY .)
    MINUS           reduce using rule 70 (factor -> BINARY .)
    CONST           reduce using rule 70 (factor -> BINARY .)
    FN              reduce using rule 70 (factor -> BINARY .)
    $end            reduce using rule 70 (factor -> BINARY .)
    BREAK           reduce using rule 70 (factor -> BINARY .)
    RETURN          reduce using rule 70 (factor -> BINARY .)
    ID              reduce using rule 70 (factor -> BINARY .)
    MUT             reduce using rule 70 (factor -> BINARY .)
    IF              reduce using rule 70 (factor -> BINARY .)
    FOR             reduce using rule 70 (factor -> BINARY .)
    RBRACE          reduce using rule 70 (factor -> BINARY .)
    EQ              reduce using rule 70 (factor -> BINARY .)
    NEQ             reduce using rule 70 (factor -> BINARY .)
    LT              reduce using rule 70 (factor -> BINARY .)
    LE              reduce using rule 70 (factor -> BINARY .)
    GT              reduce using rule 70 (factor -> BINARY .)
    GE              reduce using rule 70 (factor -> BINARY .)
    AND             reduce using rule 70 (factor -> BINARY .)
    OR              reduce using rule 70 (factor -> BINARY .)
    COMMA           reduce using rule 70 (factor -> BINARY .)
    RPAREN          reduce using rule 70 (factor -> BINARY .)
    LBRACE          reduce using rule 70 (factor -> BINARY .)
    SEMICOLON       reduce using rule 70 (factor -> BINARY .)
    RBRACKET        reduce using rule 70 (factor -> BINARY .)


state 124

    (71) factor -> OCTAL .

    TIMES           reduce using rule 71 (factor -> OCTAL .)
    DIVIDE          reduce using rule 71 (factor -> OCTAL .)
    MOD             reduce using rule 71 (factor -> OCTAL .)
    PLUS            reduce using rule 71 (factor -> OCTAL .)
    MINUS           reduce using rule 71 (factor -> OCTAL .)
    CONST           reduce using rule 71 (factor -> OCTAL .)
    FN              reduce using rule 71 (factor -> OCTAL .)
    $end            reduce using rule 71 (factor -> OCTAL .)
    BREAK           reduce using rule 71 (factor -> OCTAL .)
    RETURN          reduce using rule 71 (factor -> OCTAL .)
    ID              reduce using rule 71 (factor -> OCTAL .)
    MUT             reduce using rule 71 (factor -> OCTAL .)
    IF              reduce using rule 71 (factor -> OCTAL .)
    FOR             reduce using rule 71 (factor -> OCTAL .)
    RBRACE          reduce using rule 71 (factor -> OCTAL .)
    EQ              reduce using rule 71 (factor -> OCTAL .)
    NEQ             reduce using rule 71 (factor -> OCTAL .)
    LT              reduce using rule 71 (factor -> OCTAL .)
    LE              reduce using rule 71 (factor -> OCTAL .)
    GT              reduce using rule 71 (factor -> OCTAL .)
    GE              reduce using rule 71 (factor -> OCTAL .)
    AND             reduce using rule 71 (factor -> OCTAL .)
    OR              reduce using rule 71 (factor -> OCTAL .)
    COMMA           reduce using rule 71 (factor -> OCTAL .)
    RPAREN          reduce using rule 71 (factor -> OCTAL .)
    LBRACE          reduce using rule 71 (factor -> OCTAL .)
    SEMICOLON       reduce using rule 71 (factor -> OCTAL .)
    RBRACKET        reduce using rule 71 (factor -> OCTAL .)


state 125

    (72) factor -> HEX .

    TIMES           reduce using rule 72 (factor -> HEX .)
    DIVIDE          reduce using rule 72 (factor -> HEX .)
    MOD             reduce using rule 72 (factor -> HEX .)
    PLUS            reduce using rule 72 (factor -> HEX .)
    MINUS           reduce using rule 72 (factor -> HEX .)
    CONST           reduce using rule 72 (factor -> HEX .)
    FN              reduce using rule 72 (factor -> HEX .)
    $end            reduce using rule 72 (factor -> HEX .)
    BREAK           reduce using rule 72 (factor -> HEX .)
    RETURN          reduce using rule 72 (factor -> HEX .)
    ID              reduce using rule 72 (factor -> HEX .)
    MUT             reduce using rule 72 (factor -> HEX .)
    IF              reduce using rule 72 (factor -> HEX .)
    FOR             reduce using rule 72 (factor -> HEX .)
    RBRACE          reduce using rule 72 (factor -> HEX .)
    EQ              reduce using rule 72 (factor -> HEX .)
    NEQ             reduce using rule 72 (factor -> HEX .)
    LT              reduce using rule 72 (factor -> HEX .)
    LE              reduce using rule 72 (factor -> HEX .)
    GT              reduce using rule 72 (factor -> HEX .)
    GE              reduce using rule 72 (factor -> HEX .)
    AND             reduce using rule 72 (factor -> HEX .)
    OR              reduce using rule 72 (factor -> HEX .)
    COMMA           reduce using rule 72 (factor -> HEX .)
    RPAREN          reduce using rule 72 (factor -> HEX .)
    LBRACE          reduce using rule 72 (factor -> HEX .)
    SEMICOLON       reduce using rule 72 (factor -> HEX .)
    RBRACKET        reduce using rule 72 (factor -> HEX .)


state 126

    (73) factor -> size_of_expression .

    TIMES           reduce using rule 73 (factor -> size_of_expression .)
    DIVIDE          reduce using rule 73 (factor -> size_of_expression .)
    MOD             reduce using rule 73 (factor -> size_of_expression .)
    PLUS            reduce using rule 73 (factor -> size_of_expression .)
    MINUS           reduce using rule 73 (factor -> size_of_expression .)
    CONST           reduce using rule 73 (factor -> size_of_expression .)
    FN              reduce using rule 73 (factor -> size_of_expression .)
    $end            reduce using rule 73 (factor -> size_of_expression .)
    BREAK           reduce using rule 73 (factor -> size_of_expression .)
    RETURN          reduce using rule 73 (factor -> size_of_expression .)
    ID              reduce using rule 73 (factor -> size_of_expression .)
    MUT             reduce using rule 73 (factor -> size_of_expression .)
    IF              reduce using rule 73 (factor -> size_of_expression .)
    FOR             reduce using rule 73 (factor -> size_of_expression .)
    RBRACE          reduce using rule 73 (factor -> size_of_expression .)
    EQ              reduce using rule 73 (factor -> size_of_expression .)
    NEQ             reduce using rule 73 (factor -> size_of_expression .)
    LT              reduce using rule 73 (factor -> size_of_expression .)
    LE              reduce using rule 73 (factor -> size_of_expression .)
    GT              reduce using rule 73 (factor -> size_of_expression .)
    GE              reduce using rule 73 (factor -> size_of_expression .)
    AND             reduce using rule 73 (factor -> size_of_expression .)
    OR              reduce using rule 73 (factor -> size_of_expression .)
    COMMA           reduce using rule 73 (factor -> size_of_expression .)
    RPAREN          reduce using rule 73 (factor -> size_of_expression .)
    LBRACE          reduce using rule 73 (factor -> size_of_expression .)
    SEMICOLON       reduce using rule 73 (factor -> size_of_expression .)
    RBRACKET        reduce using rule 73 (factor -> size_of_expression .)


state 127

    (74) size_of_expression -> SIZEOF . LPAREN expression RPAREN
    (75) size_of_expression -> SIZEOF . LPAREN ID RPAREN

    LPAREN          shift and go to state 155


state 128

    (52) expression -> expression MINUS term .
    (56) term -> term . TIMES factor
    (57) term -> term . DIVIDE factor
    (58) term -> term . MOD factor

    PLUS            reduce using rule 52 (expression -> expression MINUS term .)
    MINUS           reduce using rule 52 (expression -> expression MINUS term .)
    CONST           reduce using rule 52 (expression -> expression MINUS term .)
    FN              reduce using rule 52 (expression -> expression MINUS term .)
    $end            reduce using rule 52 (expression -> expression MINUS term .)
    BREAK           reduce using rule 52 (expression -> expression MINUS term .)
    RETURN          reduce using rule 52 (expression -> expression MINUS term .)
    ID              reduce using rule 52 (expression -> expression MINUS term .)
    MUT             reduce using rule 52 (expression -> expression MINUS term .)
    IF              reduce using rule 52 (expression -> expression MINUS term .)
    FOR             reduce using rule 52 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 52 (expression -> expression MINUS term .)
    EQ              reduce using rule 52 (expression -> expression MINUS term .)
    NEQ             reduce using rule 52 (expression -> expression MINUS term .)
    LT              reduce using rule 52 (expression -> expression MINUS term .)
    LE              reduce using rule 52 (expression -> expression MINUS term .)
    GT              reduce using rule 52 (expression -> expression MINUS term .)
    GE              reduce using rule 52 (expression -> expression MINUS term .)
    AND             reduce using rule 52 (expression -> expression MINUS term .)
    OR              reduce using rule 52 (expression -> expression MINUS term .)
    COMMA           reduce using rule 52 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 52 (expression -> expression MINUS term .)
    LBRACE          reduce using rule 52 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 52 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 52 (expression -> expression MINUS term .)
    TIMES           shift and go to state 150
    DIVIDE          shift and go to state 151
    MOD             shift and go to state 152


state 129

    (36) list_statement -> ID DECLARE_ASSIGN LBRACKET params . RBRACKET

    RBRACKET        shift and go to state 156


state 130

    (39) list_assignment -> ID LBRACKET NUMBER RBRACKET . ASSIGN expression

    ASSIGN          shift and go to state 157


state 131

    (42) func_call -> ID LPAREN params RPAREN .

    BREAK           reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    RETURN          reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    ID              reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    MUT             reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    IF              reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    FOR             reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    RBRACE          reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    PLUS            reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    MINUS           reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    CONST           reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    FN              reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    $end            reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    EQ              reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    NEQ             reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    LT              reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    LE              reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    GT              reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    GE              reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    AND             reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    OR              reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    COMMA           reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    LBRACE          reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    SEMICOLON       reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)
    RBRACKET        reduce using rule 42 (func_call -> ID LPAREN params RPAREN .)


state 132

    (16) params -> expression COMMA . params
    (16) params -> . expression COMMA params
    (17) params -> . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 83
    params                         shift and go to state 158
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 133

    (34) var_statement -> MUT ID DECLARE_ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 34 (var_statement -> MUT ID DECLARE_ASSIGN expression .)
    RETURN          reduce using rule 34 (var_statement -> MUT ID DECLARE_ASSIGN expression .)
    ID              reduce using rule 34 (var_statement -> MUT ID DECLARE_ASSIGN expression .)
    MUT             reduce using rule 34 (var_statement -> MUT ID DECLARE_ASSIGN expression .)
    IF              reduce using rule 34 (var_statement -> MUT ID DECLARE_ASSIGN expression .)
    FOR             reduce using rule 34 (var_statement -> MUT ID DECLARE_ASSIGN expression .)
    RBRACE          reduce using rule 34 (var_statement -> MUT ID DECLARE_ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 134

    (37) list_statement -> MUT ID DECLARE_ASSIGN LBRACKET . params RBRACKET
    (38) list_statement -> MUT ID DECLARE_ASSIGN LBRACKET . params RBRACKET ID
    (16) params -> . expression COMMA params
    (17) params -> . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    params                         shift and go to state 159
    expression                     shift and go to state 83
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 135

    (45) if_statement -> IF expression_relacional block_statement elseop .

    BREAK           reduce using rule 45 (if_statement -> IF expression_relacional block_statement elseop .)
    RETURN          reduce using rule 45 (if_statement -> IF expression_relacional block_statement elseop .)
    ID              reduce using rule 45 (if_statement -> IF expression_relacional block_statement elseop .)
    MUT             reduce using rule 45 (if_statement -> IF expression_relacional block_statement elseop .)
    IF              reduce using rule 45 (if_statement -> IF expression_relacional block_statement elseop .)
    FOR             reduce using rule 45 (if_statement -> IF expression_relacional block_statement elseop .)
    RBRACE          reduce using rule 45 (if_statement -> IF expression_relacional block_statement elseop .)


state 136

    (46) elseop -> ELSE . if_statement
    (47) elseop -> ELSE . block_statement
    (44) if_statement -> . IF expression_relacional block_statement
    (45) if_statement -> . IF expression_relacional block_statement elseop
    (18) block_statement -> . LBRACE statements RBRACE
    (19) block_statement -> . LBRACE RBRACE

    IF              shift and go to state 38
    LBRACE          shift and go to state 17

    if_statement                   shift and go to state 160
    block_statement                shift and go to state 161

state 137

    (78) expression_relacional -> expression EQ expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    LBRACE          reduce using rule 78 (expression_relacional -> expression EQ expression .)
    SEMICOLON       reduce using rule 78 (expression_relacional -> expression EQ expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 138

    (79) expression_relacional -> expression NEQ expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    LBRACE          reduce using rule 79 (expression_relacional -> expression NEQ expression .)
    SEMICOLON       reduce using rule 79 (expression_relacional -> expression NEQ expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 139

    (80) expression_relacional -> expression LT expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    LBRACE          reduce using rule 80 (expression_relacional -> expression LT expression .)
    SEMICOLON       reduce using rule 80 (expression_relacional -> expression LT expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 140

    (81) expression_relacional -> expression LE expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    LBRACE          reduce using rule 81 (expression_relacional -> expression LE expression .)
    SEMICOLON       reduce using rule 81 (expression_relacional -> expression LE expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 141

    (82) expression_relacional -> expression GT expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    LBRACE          reduce using rule 82 (expression_relacional -> expression GT expression .)
    SEMICOLON       reduce using rule 82 (expression_relacional -> expression GT expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 142

    (83) expression_relacional -> expression GE expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    LBRACE          reduce using rule 83 (expression_relacional -> expression GE expression .)
    SEMICOLON       reduce using rule 83 (expression_relacional -> expression GE expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 143

    (84) expression_relacional -> expression AND expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    LBRACE          reduce using rule 84 (expression_relacional -> expression AND expression .)
    SEMICOLON       reduce using rule 84 (expression_relacional -> expression AND expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 144

    (85) expression_relacional -> expression OR expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    LBRACE          reduce using rule 85 (expression_relacional -> expression OR expression .)
    SEMICOLON       reduce using rule 85 (expression_relacional -> expression OR expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 145

    (48) for_statement -> FOR ID IN expression . block_statement
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term
    (18) block_statement -> . LBRACE statements RBRACE
    (19) block_statement -> . LBRACE RBRACE

    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    LBRACE          shift and go to state 17

    block_statement                shift and go to state 162

state 146

    (49) for_statement -> FOR ID SEMICOLON expression_relacional . SEMICOLON increment_rule block_statement

    SEMICOLON       shift and go to state 163


state 147

    (15) sigparams -> ID ID COMMA . sigparams
    (14) sigparams -> . ID ID
    (15) sigparams -> . ID ID COMMA sigparams

    ID              shift and go to state 71

    sigparams                      shift and go to state 164

state 148

    (40) list_call -> ID LBRACKET DOTDOT RBRACKET .

    PLUS            reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    MINUS           reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    CONST           reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    FN              reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    $end            reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    BREAK           reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    RETURN          reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    ID              reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    MUT             reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    IF              reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    FOR             reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    RBRACE          reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    EQ              reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    NEQ             reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    LT              reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    LE              reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    GT              reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    GE              reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    AND             reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    OR              reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    COMMA           reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    RPAREN          reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    LBRACE          reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    SEMICOLON       reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)
    RBRACKET        reduce using rule 40 (list_call -> ID LBRACKET DOTDOT RBRACKET .)


state 149

    (41) list_call -> ID LBRACKET NUMBER DOTDOT . NUMBER RBRACKET

    NUMBER          shift and go to state 165


state 150

    (56) term -> term TIMES . factor
    (60) factor -> . ID
    (61) factor -> . NUMBER
    (62) factor -> . NUMBERFLOAT
    (63) factor -> . WORD
    (64) factor -> . TRUE
    (65) factor -> . FALSE
    (66) factor -> . RUNEVALOR
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . ID LBRACKET NUMBER RBRACKET
    (69) factor -> . NOTACAOCIENTIFICA
    (70) factor -> . BINARY
    (71) factor -> . OCTAL
    (72) factor -> . HEX
    (73) factor -> . size_of_expression
    (74) size_of_expression -> . SIZEOF LPAREN expression RPAREN
    (75) size_of_expression -> . SIZEOF LPAREN ID RPAREN

    ID              shift and go to state 114
    NUMBER          shift and go to state 115
    NUMBERFLOAT     shift and go to state 116
    WORD            shift and go to state 117
    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    RUNEVALOR       shift and go to state 120
    LPAREN          shift and go to state 121
    NOTACAOCIENTIFICA shift and go to state 122
    BINARY          shift and go to state 123
    OCTAL           shift and go to state 124
    HEX             shift and go to state 125
    SIZEOF          shift and go to state 127

    factor                         shift and go to state 166
    size_of_expression             shift and go to state 126

state 151

    (57) term -> term DIVIDE . factor
    (60) factor -> . ID
    (61) factor -> . NUMBER
    (62) factor -> . NUMBERFLOAT
    (63) factor -> . WORD
    (64) factor -> . TRUE
    (65) factor -> . FALSE
    (66) factor -> . RUNEVALOR
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . ID LBRACKET NUMBER RBRACKET
    (69) factor -> . NOTACAOCIENTIFICA
    (70) factor -> . BINARY
    (71) factor -> . OCTAL
    (72) factor -> . HEX
    (73) factor -> . size_of_expression
    (74) size_of_expression -> . SIZEOF LPAREN expression RPAREN
    (75) size_of_expression -> . SIZEOF LPAREN ID RPAREN

    ID              shift and go to state 114
    NUMBER          shift and go to state 115
    NUMBERFLOAT     shift and go to state 116
    WORD            shift and go to state 117
    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    RUNEVALOR       shift and go to state 120
    LPAREN          shift and go to state 121
    NOTACAOCIENTIFICA shift and go to state 122
    BINARY          shift and go to state 123
    OCTAL           shift and go to state 124
    HEX             shift and go to state 125
    SIZEOF          shift and go to state 127

    factor                         shift and go to state 167
    size_of_expression             shift and go to state 126

state 152

    (58) term -> term MOD . factor
    (60) factor -> . ID
    (61) factor -> . NUMBER
    (62) factor -> . NUMBERFLOAT
    (63) factor -> . WORD
    (64) factor -> . TRUE
    (65) factor -> . FALSE
    (66) factor -> . RUNEVALOR
    (67) factor -> . LPAREN expression RPAREN
    (68) factor -> . ID LBRACKET NUMBER RBRACKET
    (69) factor -> . NOTACAOCIENTIFICA
    (70) factor -> . BINARY
    (71) factor -> . OCTAL
    (72) factor -> . HEX
    (73) factor -> . size_of_expression
    (74) size_of_expression -> . SIZEOF LPAREN expression RPAREN
    (75) size_of_expression -> . SIZEOF LPAREN ID RPAREN

    ID              shift and go to state 114
    NUMBER          shift and go to state 115
    NUMBERFLOAT     shift and go to state 116
    WORD            shift and go to state 117
    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    RUNEVALOR       shift and go to state 120
    LPAREN          shift and go to state 121
    NOTACAOCIENTIFICA shift and go to state 122
    BINARY          shift and go to state 123
    OCTAL           shift and go to state 124
    HEX             shift and go to state 125
    SIZEOF          shift and go to state 127

    factor                         shift and go to state 168
    size_of_expression             shift and go to state 126

state 153

    (68) factor -> ID LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 169


state 154

    (67) factor -> LPAREN expression . RPAREN
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    RPAREN          shift and go to state 170
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 155

    (74) size_of_expression -> SIZEOF LPAREN . expression RPAREN
    (75) size_of_expression -> SIZEOF LPAREN . ID RPAREN
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 172

    expression                     shift and go to state 171
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 156

    (36) list_statement -> ID DECLARE_ASSIGN LBRACKET params RBRACKET .

    BREAK           reduce using rule 36 (list_statement -> ID DECLARE_ASSIGN LBRACKET params RBRACKET .)
    RETURN          reduce using rule 36 (list_statement -> ID DECLARE_ASSIGN LBRACKET params RBRACKET .)
    ID              reduce using rule 36 (list_statement -> ID DECLARE_ASSIGN LBRACKET params RBRACKET .)
    MUT             reduce using rule 36 (list_statement -> ID DECLARE_ASSIGN LBRACKET params RBRACKET .)
    IF              reduce using rule 36 (list_statement -> ID DECLARE_ASSIGN LBRACKET params RBRACKET .)
    FOR             reduce using rule 36 (list_statement -> ID DECLARE_ASSIGN LBRACKET params RBRACKET .)
    RBRACE          reduce using rule 36 (list_statement -> ID DECLARE_ASSIGN LBRACKET params RBRACKET .)


state 157

    (39) list_assignment -> ID LBRACKET NUMBER RBRACKET ASSIGN . expression
    (51) expression -> . expression PLUS term
    (52) expression -> . expression MINUS term
    (53) expression -> . increment_rule
    (54) expression -> . func_call
    (55) expression -> . list_call
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT
    (42) func_call -> . ID LPAREN params RPAREN
    (43) func_call -> . ID LPAREN RPAREN
    (40) list_call -> . ID LBRACKET DOTDOT RBRACKET
    (41) list_call -> . ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    ID              shift and go to state 41

    expression                     shift and go to state 173
    increment_rule                 shift and go to state 43
    func_call                      shift and go to state 44
    list_call                      shift and go to state 45

state 158

    (16) params -> expression COMMA params .

    RPAREN          reduce using rule 16 (params -> expression COMMA params .)
    RBRACKET        reduce using rule 16 (params -> expression COMMA params .)


state 159

    (37) list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params . RBRACKET
    (38) list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params . RBRACKET ID

    RBRACKET        shift and go to state 174


state 160

    (46) elseop -> ELSE if_statement .

    BREAK           reduce using rule 46 (elseop -> ELSE if_statement .)
    RETURN          reduce using rule 46 (elseop -> ELSE if_statement .)
    ID              reduce using rule 46 (elseop -> ELSE if_statement .)
    MUT             reduce using rule 46 (elseop -> ELSE if_statement .)
    IF              reduce using rule 46 (elseop -> ELSE if_statement .)
    FOR             reduce using rule 46 (elseop -> ELSE if_statement .)
    RBRACE          reduce using rule 46 (elseop -> ELSE if_statement .)


state 161

    (47) elseop -> ELSE block_statement .

    BREAK           reduce using rule 47 (elseop -> ELSE block_statement .)
    RETURN          reduce using rule 47 (elseop -> ELSE block_statement .)
    ID              reduce using rule 47 (elseop -> ELSE block_statement .)
    MUT             reduce using rule 47 (elseop -> ELSE block_statement .)
    IF              reduce using rule 47 (elseop -> ELSE block_statement .)
    FOR             reduce using rule 47 (elseop -> ELSE block_statement .)
    RBRACE          reduce using rule 47 (elseop -> ELSE block_statement .)


state 162

    (48) for_statement -> FOR ID IN expression block_statement .

    BREAK           reduce using rule 48 (for_statement -> FOR ID IN expression block_statement .)
    RETURN          reduce using rule 48 (for_statement -> FOR ID IN expression block_statement .)
    ID              reduce using rule 48 (for_statement -> FOR ID IN expression block_statement .)
    MUT             reduce using rule 48 (for_statement -> FOR ID IN expression block_statement .)
    IF              reduce using rule 48 (for_statement -> FOR ID IN expression block_statement .)
    FOR             reduce using rule 48 (for_statement -> FOR ID IN expression block_statement .)
    RBRACE          reduce using rule 48 (for_statement -> FOR ID IN expression block_statement .)


state 163

    (49) for_statement -> FOR ID SEMICOLON expression_relacional SEMICOLON . increment_rule block_statement
    (76) increment_rule -> . ID INCREMENT
    (77) increment_rule -> . ID DECREMENT

    ID              shift and go to state 175

    increment_rule                 shift and go to state 176

state 164

    (15) sigparams -> ID ID COMMA sigparams .

    RPAREN          reduce using rule 15 (sigparams -> ID ID COMMA sigparams .)


state 165

    (41) list_call -> ID LBRACKET NUMBER DOTDOT NUMBER . RBRACKET

    RBRACKET        shift and go to state 177


state 166

    (56) term -> term TIMES factor .

    TIMES           reduce using rule 56 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 56 (term -> term TIMES factor .)
    MOD             reduce using rule 56 (term -> term TIMES factor .)
    PLUS            reduce using rule 56 (term -> term TIMES factor .)
    MINUS           reduce using rule 56 (term -> term TIMES factor .)
    CONST           reduce using rule 56 (term -> term TIMES factor .)
    FN              reduce using rule 56 (term -> term TIMES factor .)
    $end            reduce using rule 56 (term -> term TIMES factor .)
    BREAK           reduce using rule 56 (term -> term TIMES factor .)
    RETURN          reduce using rule 56 (term -> term TIMES factor .)
    ID              reduce using rule 56 (term -> term TIMES factor .)
    MUT             reduce using rule 56 (term -> term TIMES factor .)
    IF              reduce using rule 56 (term -> term TIMES factor .)
    FOR             reduce using rule 56 (term -> term TIMES factor .)
    RBRACE          reduce using rule 56 (term -> term TIMES factor .)
    EQ              reduce using rule 56 (term -> term TIMES factor .)
    NEQ             reduce using rule 56 (term -> term TIMES factor .)
    LT              reduce using rule 56 (term -> term TIMES factor .)
    LE              reduce using rule 56 (term -> term TIMES factor .)
    GT              reduce using rule 56 (term -> term TIMES factor .)
    GE              reduce using rule 56 (term -> term TIMES factor .)
    AND             reduce using rule 56 (term -> term TIMES factor .)
    OR              reduce using rule 56 (term -> term TIMES factor .)
    COMMA           reduce using rule 56 (term -> term TIMES factor .)
    RPAREN          reduce using rule 56 (term -> term TIMES factor .)
    LBRACE          reduce using rule 56 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 56 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 56 (term -> term TIMES factor .)


state 167

    (57) term -> term DIVIDE factor .

    TIMES           reduce using rule 57 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 57 (term -> term DIVIDE factor .)
    MOD             reduce using rule 57 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 57 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 57 (term -> term DIVIDE factor .)
    CONST           reduce using rule 57 (term -> term DIVIDE factor .)
    FN              reduce using rule 57 (term -> term DIVIDE factor .)
    $end            reduce using rule 57 (term -> term DIVIDE factor .)
    BREAK           reduce using rule 57 (term -> term DIVIDE factor .)
    RETURN          reduce using rule 57 (term -> term DIVIDE factor .)
    ID              reduce using rule 57 (term -> term DIVIDE factor .)
    MUT             reduce using rule 57 (term -> term DIVIDE factor .)
    IF              reduce using rule 57 (term -> term DIVIDE factor .)
    FOR             reduce using rule 57 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 57 (term -> term DIVIDE factor .)
    EQ              reduce using rule 57 (term -> term DIVIDE factor .)
    NEQ             reduce using rule 57 (term -> term DIVIDE factor .)
    LT              reduce using rule 57 (term -> term DIVIDE factor .)
    LE              reduce using rule 57 (term -> term DIVIDE factor .)
    GT              reduce using rule 57 (term -> term DIVIDE factor .)
    GE              reduce using rule 57 (term -> term DIVIDE factor .)
    AND             reduce using rule 57 (term -> term DIVIDE factor .)
    OR              reduce using rule 57 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 57 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 57 (term -> term DIVIDE factor .)
    LBRACE          reduce using rule 57 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 57 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 57 (term -> term DIVIDE factor .)


state 168

    (58) term -> term MOD factor .

    TIMES           reduce using rule 58 (term -> term MOD factor .)
    DIVIDE          reduce using rule 58 (term -> term MOD factor .)
    MOD             reduce using rule 58 (term -> term MOD factor .)
    PLUS            reduce using rule 58 (term -> term MOD factor .)
    MINUS           reduce using rule 58 (term -> term MOD factor .)
    CONST           reduce using rule 58 (term -> term MOD factor .)
    FN              reduce using rule 58 (term -> term MOD factor .)
    $end            reduce using rule 58 (term -> term MOD factor .)
    BREAK           reduce using rule 58 (term -> term MOD factor .)
    RETURN          reduce using rule 58 (term -> term MOD factor .)
    ID              reduce using rule 58 (term -> term MOD factor .)
    MUT             reduce using rule 58 (term -> term MOD factor .)
    IF              reduce using rule 58 (term -> term MOD factor .)
    FOR             reduce using rule 58 (term -> term MOD factor .)
    RBRACE          reduce using rule 58 (term -> term MOD factor .)
    EQ              reduce using rule 58 (term -> term MOD factor .)
    NEQ             reduce using rule 58 (term -> term MOD factor .)
    LT              reduce using rule 58 (term -> term MOD factor .)
    LE              reduce using rule 58 (term -> term MOD factor .)
    GT              reduce using rule 58 (term -> term MOD factor .)
    GE              reduce using rule 58 (term -> term MOD factor .)
    AND             reduce using rule 58 (term -> term MOD factor .)
    OR              reduce using rule 58 (term -> term MOD factor .)
    COMMA           reduce using rule 58 (term -> term MOD factor .)
    RPAREN          reduce using rule 58 (term -> term MOD factor .)
    LBRACE          reduce using rule 58 (term -> term MOD factor .)
    SEMICOLON       reduce using rule 58 (term -> term MOD factor .)
    RBRACKET        reduce using rule 58 (term -> term MOD factor .)


state 169

    (68) factor -> ID LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 178


state 170

    (67) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    CONST           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    FN              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    MUT             reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 67 (factor -> LPAREN expression RPAREN .)


state 171

    (74) size_of_expression -> SIZEOF LPAREN expression . RPAREN
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    RPAREN          shift and go to state 179
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 172

    (75) size_of_expression -> SIZEOF LPAREN ID . RPAREN
    (76) increment_rule -> ID . INCREMENT
    (77) increment_rule -> ID . DECREMENT
    (42) func_call -> ID . LPAREN params RPAREN
    (43) func_call -> ID . LPAREN RPAREN
    (40) list_call -> ID . LBRACKET DOTDOT RBRACKET
    (41) list_call -> ID . LBRACKET NUMBER DOTDOT NUMBER RBRACKET

    RPAREN          shift and go to state 180
    INCREMENT       shift and go to state 53
    DECREMENT       shift and go to state 54
    LPAREN          shift and go to state 52
    LBRACKET        shift and go to state 74


state 173

    (39) list_assignment -> ID LBRACKET NUMBER RBRACKET ASSIGN expression .
    (51) expression -> expression . PLUS term
    (52) expression -> expression . MINUS term

    BREAK           reduce using rule 39 (list_assignment -> ID LBRACKET NUMBER RBRACKET ASSIGN expression .)
    RETURN          reduce using rule 39 (list_assignment -> ID LBRACKET NUMBER RBRACKET ASSIGN expression .)
    ID              reduce using rule 39 (list_assignment -> ID LBRACKET NUMBER RBRACKET ASSIGN expression .)
    MUT             reduce using rule 39 (list_assignment -> ID LBRACKET NUMBER RBRACKET ASSIGN expression .)
    IF              reduce using rule 39 (list_assignment -> ID LBRACKET NUMBER RBRACKET ASSIGN expression .)
    FOR             reduce using rule 39 (list_assignment -> ID LBRACKET NUMBER RBRACKET ASSIGN expression .)
    RBRACE          reduce using rule 39 (list_assignment -> ID LBRACKET NUMBER RBRACKET ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 174

    (37) list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET .
    (38) list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET . ID

  ! shift/reduce conflict for ID resolved as shift
    BREAK           reduce using rule 37 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET .)
    RETURN          reduce using rule 37 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET .)
    MUT             reduce using rule 37 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET .)
    IF              reduce using rule 37 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET .)
    FOR             reduce using rule 37 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET .)
    RBRACE          reduce using rule 37 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET .)
    ID              shift and go to state 181

  ! ID              [ reduce using rule 37 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET .) ]


state 175

    (76) increment_rule -> ID . INCREMENT
    (77) increment_rule -> ID . DECREMENT

    INCREMENT       shift and go to state 53
    DECREMENT       shift and go to state 54


state 176

    (49) for_statement -> FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule . block_statement
    (18) block_statement -> . LBRACE statements RBRACE
    (19) block_statement -> . LBRACE RBRACE

    LBRACE          shift and go to state 17

    block_statement                shift and go to state 182

state 177

    (41) list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .

    PLUS            reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    MINUS           reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    CONST           reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    FN              reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    $end            reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    BREAK           reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    RETURN          reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    ID              reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    MUT             reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    IF              reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    FOR             reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    RBRACE          reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    EQ              reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    NEQ             reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    LT              reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    LE              reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    GT              reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    GE              reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    AND             reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    OR              reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    COMMA           reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    RPAREN          reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    LBRACE          reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)
    RBRACKET        reduce using rule 41 (list_call -> ID LBRACKET NUMBER DOTDOT NUMBER RBRACKET .)


state 178

    (68) factor -> ID LBRACKET NUMBER RBRACKET .

    TIMES           reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    DIVIDE          reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    MOD             reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    PLUS            reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    MINUS           reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    CONST           reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    FN              reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    $end            reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    BREAK           reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    RETURN          reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    MUT             reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    IF              reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    FOR             reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    RBRACE          reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    EQ              reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    NEQ             reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    LT              reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    LE              reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    GT              reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    GE              reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    AND             reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    OR              reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    COMMA           reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    LBRACE          reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)
    RBRACKET        reduce using rule 68 (factor -> ID LBRACKET NUMBER RBRACKET .)


state 179

    (74) size_of_expression -> SIZEOF LPAREN expression RPAREN .

    TIMES           reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    MOD             reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    PLUS            reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    MINUS           reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    CONST           reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    FN              reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    $end            reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    BREAK           reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    RETURN          reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    ID              reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    MUT             reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    IF              reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    FOR             reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    RBRACE          reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    EQ              reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    NEQ             reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    LT              reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    LE              reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    GT              reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    GE              reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    AND             reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    OR              reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    COMMA           reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    RPAREN          reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    LBRACE          reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 74 (size_of_expression -> SIZEOF LPAREN expression RPAREN .)


state 180

    (75) size_of_expression -> SIZEOF LPAREN ID RPAREN .

    TIMES           reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    DIVIDE          reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    MOD             reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    PLUS            reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    MINUS           reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    CONST           reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    FN              reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    $end            reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    BREAK           reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    RETURN          reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    ID              reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    MUT             reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    IF              reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    FOR             reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    RBRACE          reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    EQ              reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    NEQ             reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    LT              reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    LE              reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    GT              reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    GE              reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    AND             reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    OR              reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    COMMA           reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    RPAREN          reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    LBRACE          reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    SEMICOLON       reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)
    RBRACKET        reduce using rule 75 (size_of_expression -> SIZEOF LPAREN ID RPAREN .)


state 181

    (38) list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET ID .

    BREAK           reduce using rule 38 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET ID .)
    RETURN          reduce using rule 38 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET ID .)
    ID              reduce using rule 38 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET ID .)
    MUT             reduce using rule 38 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET ID .)
    IF              reduce using rule 38 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET ID .)
    FOR             reduce using rule 38 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET ID .)
    RBRACE          reduce using rule 38 (list_statement -> MUT ID DECLARE_ASSIGN LBRACKET params RBRACKET ID .)


state 182

    (49) for_statement -> FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement .

    BREAK           reduce using rule 49 (for_statement -> FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement .)
    RETURN          reduce using rule 49 (for_statement -> FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement .)
    ID              reduce using rule 49 (for_statement -> FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement .)
    MUT             reduce using rule 49 (for_statement -> FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement .)
    IF              reduce using rule 49 (for_statement -> FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement .)
    FOR             reduce using rule 49 (for_statement -> FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement .)
    RBRACE          reduce using rule 49 (for_statement -> FOR ID SEMICOLON expression_relacional SEMICOLON increment_rule block_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 174 resolved as shift
