Program ->  Program_import Function_definition
           | Function_definition


Program_import -> IMPORT ID Program_import
                | IMPORT ID 

Function_definition* -> "fn" ID "(" Params ")" "{" Block_statement "}" Function_definition | 
            "fn" ID "(" Params ")" Type "{" Block_statement "}" Function_definition |
            "fn" MAIN "(" ")" "{" Block_statement "}" Function_definition_without_main |
           
Function_definition_without_main -> "fn" ID "(" Params ")" "{" Block_statement "}" Function_definition_without_main | 
                         "fn" ID "(" Params ")" Type "{" Block_statement "}" Function_definition_without_main |   
		   

Params -> Param More_Params

More_Params -> "," Param More_Params
             | ε

Param -> ID Type


Type -> INT | F32 | F64 | RUNE | STRING | BOOL 
	  
	  
Block_statement -> Var_statement | Var_assignment |
				   Func_call |
				   If_statement |
				   For_statement |
				   Return_statement

Var_statement -> 
	DeclarationImutable |
	MUT ID ":=" Expression |
	CONST ID ":=" Expression ** const can only be defined at the top level (outside of functions)

Var_assignment ->
	ID "=" Expression
				   
Func_call -> ID "(" id_list ")" |
	     ID "(" ")"

id_list -> Expression more_Expression

more_Expression -> "," Expression more_Expression
                  | ε

If_statement ->
	"if" ExpressionRelacional "{" Block_statement "}" | "if" ExpressionRelacional "{" Block_statement "}" Else?

Else? ->
	"else" If_statement | "else" "{" Block_statement "}"

For_statement -> 
	"for" ID "in" Expression "{" Block_statement "}" | **For each precisa ser uma lista desse jeito ta tratando?
	"for" DeclarationImutable ";" ExpressionRelacional ";" Increment"{" Block_statement "}" | **Logica do increment ta certa?
	"for" ExpressionRelacional "{" Block_statement "}"

DeclarationImutable ->
	ID ":=" Expression

Return_statement ->
	"return" Expression

Expression -> Expression "+" Term | Expression "-" Term | Term	      

ExpressionRelacional ->	Expression "==" Expression |
	     		Expression "!=" Expression |
	      		Expression "<" Expression |
	      		Expression "<=" Expression |
	    	  	Expression ">" Expression |
	      		Expression ">=" Expression |
	      		Expression "&&" Expression |
	      		Expression "||" Expression |
	      		"!" Expression 

Term -> Term "*" Factor | Term "/" Factor | Term "%" Factor | Factor

#elementos mais basico -- RUne entra?
Factor -> NUMBER | 
	  STRING |
	  ID     |
	  "(" Expression ")" |
	  TRUE |
	  FALSE	|
	  RUNE

Increment -> 
	ID"++" | ID"--"
