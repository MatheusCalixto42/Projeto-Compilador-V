Program -> Program_import Program_items |
		   Program_items

Program_import -> IMPORT ID Program_import
                | IMPORT ID

Program_items -> Program_item Program_items
               | ε

Program_item -> Const_declaration
              | Function_definition

Const_declaration -> CONST ID ":=" Expression

Function_definition -> "fn" ID "(" Params ")"  Block_statement  | 
            "fn" ID "(" Params ")" Type  Block_statement  |
            "fn" ID "(" ")"  Block_statement   
						 		   

Params -> Param More_Params

More_Params -> "," Param More_Params
              |ε

Param -> ID Type


Type -> INT | F32 | F64 | RUNETYPE | STRINGTYPE | BOOL 
	  
Block_statement -> {Stms} 
				| {}

Stms -> Stm Stms 
	   |Stm

stm -> Var_statement  | 
			 Var_assignment  |
			 List_statement  |
			 List_assignment  |
			 Func_call  |
			 If_statement  |
			 For_statement  |
			 Increment  |
			 Assignment  |
			 Break_statement
			 Return_statement |

			 

Var_statement -> 
	DeclarationImutable |
	MUT ID ":=" Expression |
	CONST ID ":=" Expression ** const can only be defined at the top level (outside of functions)


Var_assignment ->
	ID "=" Expression

	
List_statement ->
	DeclarationImutableList |
	MUT ID ":=" "[" id_list "]" |
	MUT ID ":=" "[" NUMBER "]" Type |  vou trocar 'NUMBER' por 'id'
	

List_assignment ->
	ID "[" NUMBER "]" "=" Expression 

DeclarationImutableList ->		
	ID ":=" "[" id_list "]"

Func_call -> ID "(" id_list ")" |
	     ID "(" ")" |
			 FuncCallList 

FuncCallList -> ID "[" DOTDOT "]" |
				ID "[" NUMBER DOTDOT NUMBER "]" |
								

								
id_list -> Expression more_Expression 


more_Expression -> "," Expression more_Expression
                  | ε

If_statement ->
	"if" ExpressionRelacional  Block_statement  | "if" ExpressionRelacional  Block_statement  ElseOp

ElseOp ->
	"else" If_statement | "else"  Block_statement 

For_statement -> 
	"for" ID "in" Expression  Block_statement | **For each precisa ser uma lista desse jeito ta tratando?
	"for" DeclarationImutable ";" ExpressionRelacional ";" Increment Block_statement  | **Logica do increment ta certa?
	"for" ExpressionRelacional  Block_statement 

DeclarationImutable ->
	ID ":=" Expression

Break_statement ->
	"break"

Return_statement ->
	"return" Expression

Expression -> Expression "+" Term | Expression "-" Term | Term | Increment | Func_call    

ExpressionRelacional ->	Expression "==" Expression |
	     		Expression "!=" Expression |
	      		Expression "<" Expression |
	      		Expression "<=" Expression |
	    	  	Expression ">" Expression |
	      		Expression ">=" Expression |
	      		Expression "&&" Expression |
	      		Expression "||" Expression |
	      		"!" Expression 

Term -> Term "*" Factor | Term "/" Factor | Term "%" Factor | Factor

#elementos mais basico 
Factor -> NUMBER | 
	  STRING |
	  ID     |
	  "(" Expression ")" |
	  ID "[" NUMBER "]" |
	  TRUE |
	  FALSE	|
	  RUNE |
	  NUMBERFLOAT|
      NOTACAOCIENTIFICA |
	  BINARY |
	  OCTAL |
	  HEX   |
	  INTERPOLATIONSTRING |
	  SizeofExpression

SizeofExpression ->
				    "sizeof" "(" Expression ")"|
                    "sizeof" "(" Type ")"

Increment -> 
	ID"++" | ID"--"


Assignment -> ID "+=" Expression
			  ID "-=" Expression
			  ID "*=" Expression
			  ID "/=" Expression
			  ID "%=" Expression
			  ID "&=" Expression
			  ID "|=" Expression
			  ID "^=" Expression
			  ID "<<=" Expression
			  ID ">>=" Expression

